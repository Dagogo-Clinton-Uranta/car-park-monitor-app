[{"/home/dagogo/Desktop/car-park/frontend/src/index.js":"1","/home/dagogo/Desktop/car-park/frontend/src/Final.js":"2","/home/dagogo/Desktop/car-park/frontend/src/store.js":"3","/home/dagogo/Desktop/car-park/frontend/src/App.js":"4","/home/dagogo/Desktop/car-park/frontend/src/reducers/productReducers.js":"5","/home/dagogo/Desktop/car-park/frontend/src/reducers/cartReducers.js":"6","/home/dagogo/Desktop/car-park/frontend/src/reducers/userReducers.js":"7","/home/dagogo/Desktop/car-park/frontend/src/reducers/orderReducers.js":"8","/home/dagogo/Desktop/car-park/frontend/src/components/Header.js":"9","/home/dagogo/Desktop/car-park/frontend/src/components/Footer.js":"10","/home/dagogo/Desktop/car-park/frontend/src/screens/HomeScreen.js":"11","/home/dagogo/Desktop/car-park/frontend/src/screens/ProductScreen.js":"12","/home/dagogo/Desktop/car-park/frontend/src/screens/CartScreen.js":"13","/home/dagogo/Desktop/car-park/frontend/src/screens/LoginScreen.js":"14","/home/dagogo/Desktop/car-park/frontend/src/screens/RegisterScreen.js":"15","/home/dagogo/Desktop/car-park/frontend/src/screens/ProfileScreen.js":"16","/home/dagogo/Desktop/car-park/frontend/src/screens/ShippingScreen.js":"17","/home/dagogo/Desktop/car-park/frontend/src/screens/PaymentScreen.js":"18","/home/dagogo/Desktop/car-park/frontend/src/screens/PlaceOrderScreen.js":"19","/home/dagogo/Desktop/car-park/frontend/src/screens/OrderScreen.js":"20","/home/dagogo/Desktop/car-park/frontend/src/screens/OrderListScreen.js":"21","/home/dagogo/Desktop/car-park/frontend/src/screens/CommunicationScreen.js":"22","/home/dagogo/Desktop/car-park/frontend/src/screens/UserEditScreen.js":"23","/home/dagogo/Desktop/car-park/frontend/src/screens/AdminComScreen.js":"24","/home/dagogo/Desktop/car-park/frontend/src/screens/UserListScreen.js":"25","/home/dagogo/Desktop/car-park/frontend/src/screens/ProductListScreen.js":"26","/home/dagogo/Desktop/car-park/frontend/src/screens/ProductEditScreen.js":"27","/home/dagogo/Desktop/car-park/frontend/src/constants/productConstants.js":"28","/home/dagogo/Desktop/car-park/frontend/src/constants/cartConstants.js":"29","/home/dagogo/Desktop/car-park/frontend/src/constants/UserConstants.js":"30","/home/dagogo/Desktop/car-park/frontend/src/components/SearchBox.js":"31","/home/dagogo/Desktop/car-park/frontend/src/components/Message.js":"32","/home/dagogo/Desktop/car-park/frontend/src/components/FormContainer.js":"33","/home/dagogo/Desktop/car-park/frontend/src/constants/orderConstants.js":"34","/home/dagogo/Desktop/car-park/frontend/src/components/Loader.js":"35","/home/dagogo/Desktop/car-park/frontend/src/components/Paginate.js":"36","/home/dagogo/Desktop/car-park/frontend/src/components/CheckoutSteps.js":"37","/home/dagogo/Desktop/car-park/frontend/src/actions/orderActions.js":"38","/home/dagogo/Desktop/car-park/frontend/src/actions/productActions.js":"39","/home/dagogo/Desktop/car-park/frontend/src/actions/userActions.js":"40","/home/dagogo/Desktop/car-park/frontend/src/actions/cartActions.js":"41","/home/dagogo/Desktop/car-park/frontend/src/components/productComponent.js":"42","/home/dagogo/Desktop/car-park/frontend/src/components/ProductCarousel.js":"43","/home/dagogo/Desktop/car-park/frontend/src/components/Meta.js":"44","/home/dagogo/Desktop/car-park/frontend/src/components/Rating.js":"45","/home/dagogo/Desktop/car-park/frontend/src/screens/PrintingScreen.js":"46","/home/dagogo/Desktop/car-park/frontend/src/screens/TruckParkDetailsScreen.js":"47","/home/dagogo/Desktop/car-park/frontend/src/screens/ExitScreen.js":"48","/home/dagogo/Desktop/car-park/frontend/src/screens/ExitPrintScreen.js":"49"},{"size":267,"mtime":1621882819327,"results":"50","hashOfConfig":"51"},{"size":297,"mtime":1621882819319,"results":"52","hashOfConfig":"51"},{"size":2813,"mtime":1624740569826,"results":"53","hashOfConfig":"51"},{"size":3384,"mtime":1624526863693,"results":"54","hashOfConfig":"51"},{"size":4291,"mtime":1621882819327,"results":"55","hashOfConfig":"51"},{"size":1206,"mtime":1621882819327,"results":"56","hashOfConfig":"51"},{"size":6445,"mtime":1624740467307,"results":"57","hashOfConfig":"51"},{"size":3728,"mtime":1624726820286,"results":"58","hashOfConfig":"51"},{"size":4920,"mtime":1624218735041,"results":"59","hashOfConfig":"51"},{"size":416,"mtime":1623685620021,"results":"60","hashOfConfig":"51"},{"size":2644,"mtime":1621882819327,"results":"61","hashOfConfig":"51"},{"size":13689,"mtime":1624812578895,"results":"62","hashOfConfig":"51"},{"size":3171,"mtime":1621882819327,"results":"63","hashOfConfig":"51"},{"size":2832,"mtime":1623787066023,"results":"64","hashOfConfig":"51"},{"size":8904,"mtime":1621882819327,"results":"65","hashOfConfig":"51"},{"size":6601,"mtime":1621882819327,"results":"66","hashOfConfig":"51"},{"size":2772,"mtime":1621882819327,"results":"67","hashOfConfig":"51"},{"size":1990,"mtime":1621882819327,"results":"68","hashOfConfig":"51"},{"size":13671,"mtime":1621882819327,"results":"69","hashOfConfig":"51"},{"size":17885,"mtime":1623062851981,"results":"70","hashOfConfig":"51"},{"size":3808,"mtime":1624833768540,"results":"71","hashOfConfig":"51"},{"size":3389,"mtime":1621882819327,"results":"72","hashOfConfig":"51"},{"size":3666,"mtime":1621882819331,"results":"73","hashOfConfig":"51"},{"size":5368,"mtime":1621882819327,"results":"74","hashOfConfig":"51"},{"size":3480,"mtime":1621882819331,"results":"75","hashOfConfig":"51"},{"size":4856,"mtime":1621882819327,"results":"76","hashOfConfig":"51"},{"size":6937,"mtime":1621882819327,"results":"77","hashOfConfig":"51"},{"size":1789,"mtime":1621882819323,"results":"78","hashOfConfig":"51"},{"size":234,"mtime":1621882819323,"results":"79","hashOfConfig":"51"},{"size":2598,"mtime":1624740163963,"results":"80","hashOfConfig":"51"},{"size":815,"mtime":1621882819323,"results":"81","hashOfConfig":"51"},{"size":273,"mtime":1621882819323,"results":"82","hashOfConfig":"51"},{"size":451,"mtime":1621882819323,"results":"83","hashOfConfig":"51"},{"size":1565,"mtime":1624725092278,"results":"84","hashOfConfig":"51"},{"size":330,"mtime":1621882819323,"results":"85","hashOfConfig":"51"},{"size":609,"mtime":1621882819323,"results":"86","hashOfConfig":"51"},{"size":1460,"mtime":1621882819323,"results":"87","hashOfConfig":"51"},{"size":9430,"mtime":1624727100329,"results":"88","hashOfConfig":"51"},{"size":7105,"mtime":1623802451246,"results":"89","hashOfConfig":"51"},{"size":12812,"mtime":1624743234337,"results":"90","hashOfConfig":"51"},{"size":1624,"mtime":1621882819319,"results":"91","hashOfConfig":"51"},{"size":966,"mtime":1621882819323,"results":"92","hashOfConfig":"51"},{"size":1280,"mtime":1621882819323,"results":"93","hashOfConfig":"51"},{"size":516,"mtime":1621882819323,"results":"94","hashOfConfig":"51"},{"size":1779,"mtime":1621882819323,"results":"95","hashOfConfig":"51"},{"size":14701,"mtime":1624815205615,"results":"96","hashOfConfig":"51"},{"size":11746,"mtime":1624159421148,"results":"97","hashOfConfig":"51"},{"size":13148,"mtime":1624810582130,"results":"98","hashOfConfig":"51"},{"size":16008,"mtime":1624730576286,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"3r8rss",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"102"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"102"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"102"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"102"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"102"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"102"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"102"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"102"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"102"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"102"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"102"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"102"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"102"},"/home/dagogo/Desktop/car-park/frontend/src/index.js",[],["217","218"],"/home/dagogo/Desktop/car-park/frontend/src/Final.js",[],"/home/dagogo/Desktop/car-park/frontend/src/store.js",[],"/home/dagogo/Desktop/car-park/frontend/src/App.js",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"\nimport React from 'react'\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\nimport {Container} from 'react-bootstrap';\nimport Header from './components/Header.js'\nimport Footer from './components/Footer.js'\nimport HomeScreen from './screens/HomeScreen.js'\nimport ProductScreen from './screens/ProductScreen.js'\nimport PrintingScreen from './screens/PrintingScreen.js'\nimport TruckParkDetailsScreen from './screens/TruckParkDetailsScreen.js'\nimport ExitScreen from './screens/ExitScreen.js'\nimport ExitPrintScreen from './screens/ExitPrintScreen.js'\nimport CartScreen from './screens/CartScreen.js'\nimport LoginScreen from './screens/LoginScreen.js'\nimport RegisterScreen from './screens/RegisterScreen.js'\nimport ProfileScreen from './screens/ProfileScreen.js'\nimport ShippingScreen from './screens/ShippingScreen.js'\nimport PaymentScreen from './screens/PaymentScreen.js'\nimport PlaceOrderScreen from './screens/PlaceOrderScreen.js'\nimport OrderScreen from './screens/OrderScreen.js'\nimport OrderListScreen from './screens/OrderListScreen.js'\nimport CommunicationScreen from './screens/CommunicationScreen.js'\nimport AdminComScreen from './screens/AdminComScreen.js'\nimport UserListScreen from './screens/UserListScreen.js'\nimport UserEditScreen from './screens/UserEditScreen.js'\nimport ProductListScreen from './screens/ProductListScreen.js'\nimport ProductEditScreen from './screens/ProductEditScreen.js'\n\nconst App = () => {\n\n    return (\n      \n      \n  <Router> \n      <Header/>\n      <main className ='py-3'>\n       <Container>\n       {/*< Route path='/order/:id' component={OrderScreen}/>\n       < Route path='/shipping' component={ShippingScreen}/>\n       < Route path='/payment' component={PaymentScreen}/>\n       < Route path='/placeorder' component={PlaceOrderScreen}/>\n       < Route path='/login' component={LoginScreen}/>\n       < Route path='/register' component={RegisterScreen}/>\n       < Route path='/profile' component={ProfileScreen}/>\n    < Route path= '/communications' component={CommunicationScreen} />*/}\n       \n        < Route path='/'exact component={ProductScreen}/> \n        < Route path='/printenter' component={PrintingScreen}/> \n        < Route path='/parklogs' exact component={OrderListScreen}/>\n        < Route path='/parklog/:id' component={TruckParkDetailsScreen}/>\n        < Route path='/exit'exact component={ExitScreen}/> \n        < Route path='/printexit' component={ExitPrintScreen}/> \n        {/*< Route path='/cart/:id?' component={CartScreen}/>\n        < Route path='/admin/userlist' component={UserListScreen}/>\n        < Route path='/admin/user/:id/communications' component={AdminComScreen}/>\n        < Route path='/admin/user/:id/edit' component={UserEditScreen}/>\n        < Route path='/admin/productlist'  exact component={ProductListScreen}/>\n        < Route path='/admin/productlist/:pageNumber'  exact component={ProductListScreen}/>\n        < Route path='/admin/product/:id/edit' component={ProductEditScreen}/>\n       \n        < Route path='/search/:keyword' component={HomeScreen} exact/>\n        < Route path='/page/:pageNumber'exact component={HomeScreen}/>\n        < Route path='/search/:keyword/page/:pageNumber'  exact component={HomeScreen}/>\n        < Route path='/'exact component={HomeScreen}/>*/}\n\n       \n       </Container>\n      </main>\n      <Footer/>\n  </Router> \n  \n    )\n}\n\nexport default App\n","/home/dagogo/Desktop/car-park/frontend/src/reducers/productReducers.js",[],"/home/dagogo/Desktop/car-park/frontend/src/reducers/cartReducers.js",[],"/home/dagogo/Desktop/car-park/frontend/src/reducers/userReducers.js",[],"/home/dagogo/Desktop/car-park/frontend/src/reducers/orderReducers.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/Header.js",["234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"import React from 'react'\nimport {Route} from 'react-router-dom'\nimport  {useState,useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Container,Nav,Navbar,NavDropdown} from 'react-bootstrap'\nimport {logout,listUsers} from '../actions/userActions.js'\nimport {listOrders} from '../actions/orderActions.js'\nimport SearchBox from './SearchBox.js'\nimport bridgeway from './bridgeway-logo.jpg' \n\n\n\n  \n\nconst Header = () => {\n   \n  \n  const seller = '(Merchant)'\n  const dispatch = useDispatch()\n  const [cartVisibility, setCartVisibility] = useState(true)\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n\n  const userList = useSelector(state => state.userList);\n  const {loading, error,users } = userList\n  /*console.log(users)*/\n\n  const orderList = useSelector(state => state.orderList);\n  const {loading:loadingOrders, error:errorOrders,orders } = orderList\n  \n  /*if(users && userInfo){\nuserInfo.newMessages = users.some((user)=>{user.userMessageNotification % 2===0}) === true?true :falsetrue\n  }*/\n \n\n  /*if(orders && userInfo){\n    userInfo.newOrders = orders.map(function(order){order.orderItems}).every(function(item){item.promisedQty===0})===true?true:false\n  }*/\n  \n  useEffect(() => {if(userInfo && (userInfo.isMerchant||userInfo.isAdmin)){\n     setCartVisibility(false)}\n     else{setCartVisibility(true)}\n\n     /*if(userInfo && userInfo.isAdmin ){\n      dispatch(listUsers())\n      }*/\n\n      /*if(userInfo && (userInfo.isAdmin || userInfo.isMerchant) ){\n        dispatch(listOrders())\n        }*/\n      \n      \n\n  },[userInfo])\n  \n\n  const logoutHandler = () => {\n    \n    dispatch(logout())\n    window.location.assign('/')\n     \n    \n  }\n  \n    return(\n<header>\n\n <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n  <Container>\n  {/*<LinkContainer to=\"/\">\n  <Navbar.Brand ><img src={bridgeway} alt={'the logo of bridgeway bank'} /></Navbar.Brand>\n    </LinkContainer>*/}\n{/* CUZ THE ABOVE IS IN A CONTAINER, YOU CAN'T WRAP IT A NORMAL LINK TAG, YOU USE LINK CONTAINER*/}\n  \n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n  {/*<Route render ={({history})=> <SearchBox history={history}/>*/}  {/*THERE IS A VERY IMPORTANT THING TO LEARN HERE, IF YOU PUT IN A COMPONONENT DIRECTLY IN THE NAVBAR, IT HAS NO ACCESS TO PROPS, SO YOU GOTTA PUT IT IN A ROUTE AND THEN USE THE RENDER FUNCTION TO PASS IN PROPS..YOU GOTTA STUDY THIS*/}\n   <Nav className=\"ml-auto\">\n\n    {/*DONT FORGET TO USE THE CDN OF FONT-AWESOME IN INDEX.HTML\n    FROM CDN JS.COM ,JUST TYPE FONT AWESOME AND COPY IT*/}\n{/*cartVisibility &&\n<LinkContainer to='/cart'>\n     <Nav.Link ><i className='fas fa-shopping-cart'></i>Cart\n     {userInfo && userInfo.adminMessageNotification && <i className='fas fa-circle' style={{color:'red', fontSize:'8px', marginLeft:'15px' , marginRight:'-12px'}}></i>}\n     </Nav.Link>\n     \n</LinkContainer> */}\n\n   {/*userInfo?(\n     <NavDropdown title ={userInfo.name} id='username'>\n     <LinkContainer to='/profile'>\n          <NavDropdown.Item >Profile { userInfo && userInfo.adminMessageNotification &&<i className='fas fa-circle' style={{color:'red', fontSize:'7px'}}></i>} </NavDropdown.Item>\n          \n     </LinkContainer>\n\n       <NavDropdown.Item onClick={logoutHandler} >Logout </NavDropdown.Item>\n     </NavDropdown>\n   ):(\n     <LinkContainer to='/login'>\n          <Nav.Link><i className='fas fa-user'></i>Sign In</Nav.Link>\n     </LinkContainer>\n   )*/}\n\n\n{userInfo && userInfo.isMerchant && (\n     <NavDropdown title ={'Merchant Functions'} id='username'>\n\n{/*i need to make a merchant token, so that merchants have access to a productlist distinct of admins*/}\n{/*1*/}      <LinkContainer to='/admin/productlist'>\n            <NavDropdown.Item >Products</NavDropdown.Item>\n           </LinkContainer> \n\n{/*2*/}      <LinkContainer to='/admin/orderlist'>\n            <NavDropdown.Item >Orders</NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n   )}\n\n\n   { (\n  \n  <NavDropdown title ={'SELECTION MENU'} id='username'>\n\n{/*1*/}     <LinkContainer to='/'>\n            <NavDropdown.Item >Entrance </NavDropdown.Item>\n          </LinkContainer>\n\n{/*2*/}      <LinkContainer to='/exit'>\n            <NavDropdown.Item >Exit</NavDropdown.Item> \n           </LinkContainer>\n\n{/*3*/}      <LinkContainer to='/parklogs'>\n            <NavDropdown.Item >Park History</NavDropdown.Item>\n           </LinkContainer>\n\n     </NavDropdown>\n     \n   )}\n\n{/*console.log(users.some(function(user){user.userMessageNotification}))*/}\n\n{/*console.log(orders.map(function(order){order.orderItems}).every(function(item){item.qty>0} ))*/}\n\n   </Nav>\n\n  </Navbar.Collapse>\n  </Container>\n </Navbar>\n\n</header>\n    )\n}\n\nexport default Header\n/*export as default means that , that's the only thing coming out of this file*/\n","/home/dagogo/Desktop/car-park/frontend/src/components/Footer.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/HomeScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/ProductScreen.js",["248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266"],"import React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport {login,createTicket} from '../actions/userActions.js'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {listProductDetails,createProductReview} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'\n\n\nconst ProductScreen = ({history,match}) => {\n      /*cuz we need a single product from the array of products,and we gotta do it PER PAGE, we use.find method\n      TO FILTER IT OUT FROM THE ARRAY*/\n   \n\n  const dispatch = useDispatch()\n  \n  const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails\n\n  const productCreateReview = useSelector(state => state.productCreateReview)\n  const {success:successProductReview, error:errorProductReview} = productCreateReview\n  \n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n   \n  const userDirection = useSelector(state => state.userDirection)\n  const {ticketInfo,loading:loadingticket,error:errorticket} = userDirection\n\n  \n  const [email, setEmail] = useState({bookingNo:''})\n  const [bookingNo,setBookingNo] = useState('')\n  const [truckNumber, setTruckNumber] = useState('')\nconst [containerNumber,setContainerNumber] = useState('')\nconst [truckCategory, setTruckCategory] = useState('')\n\nlet zoneCounter\n  let zoneArea\n  \n  console.log(email.bookingNo)\n  console.log(userDirection)\n  \n useEffect(()=>{\n  dispatch(listProductDetails())\n    setBookingNo(email.bookingNo)\n\n  setEmail({...email,\n  truckNumber:userInfo?userInfo.truckNumber:'N/A',\n  containerNumber:userInfo?userInfo.containerNumber:'N/A',\n  entryTime:userInfo?showTime():'N/A',\n  entryDate:userInfo?date.toLocaleDateString():'N/A',\n  truckCategory:userInfo?userInfo.truckCategory:'N/A',\n})\n\n   \n  /*if(successProductReview){\n    alert(\"Thank you for your review!\")\n    setRating(0)\n    setComment('')\n    dispatch({type:PRODUCT_CREATE_REVIEW_RESET})\n  }*/\n\n   \n },[dispatch,userInfo])\n\n \n const fetchDetailsHandler = (e) => {\n  \n  /*dispatch(login(bookingNo))*/\n   /*dispatch(login(email.bookingNo))*/\n\n}\n\nconst object = {bookingNumber:email.bookingNo,\ntruckNumber:truckNumber,\ncontainerNumber:containerNumber,\n truckCategory:truckCategory}\n\nconst createTicketHandler= (e) => {\n  dispatch(createTicket(object))\n}\n\n\n/*const addToCartHandler = () => {\n  if(!userInfo){\n    window.alert('Please sign in to purchase')\n  }\n  else if(userInfo && (userInfo.isAdmin||userInfo.isMerchant)){\n    window.alert('Only customers may make purchases, please register as a customer')\n  }\n    else{history.push(`/cart/${match.params.id}?qty=${qty}`)} //there was a blank set of curly braces here, you just put quantity in \n}*/\n  \nconst previousPageHandler = () => {\n  \n  window.history.back()\n}\n\n \n\n \n \n  let date = new Date()\n\n  function showTime(){\n    let time = new Date()\n    let hour = time.getHours();\n    let min = time.getMinutes();\n    let sec = time.getSeconds();\n    let am_pm=\"AM\"\n\n    if(hour>12){\n      hour -= 12;\n      am_pm=\"PM\"\n    }\n\n    if(hour==0){\n      hour = 12;\n      am_pm=\"AM\"\n    }\n     hour = hour < 10 ? \"0\" + hour :hour;\n     min = min < 10 ? \"0\" + min :min;\n     sec = sec < 10 ? \"0\" + sec :sec;\n\n     let currentTime = hour +\":\" + min + \" \" + am_pm\n     return currentTime\n  }\n  \n  /*it is not product.number anymore , its occupied spaces and free spaces */\n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].number < 52 ){ zoneArea = 'F'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].number === 52 && product[6].number < 50 ){zoneArea = 'G'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].number === 50 && product[7].number < 51 ){zoneArea = 'H'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].number === 51 && product[8].number < 95 ){zoneArea = 'R'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number < 37 ){zoneArea = 'A'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number === 37 && product[1].number < 46 ){zoneArea = 'B'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number < 78 ){zoneArea = 'C'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number === 78 && product[3].number < 30 ){zoneArea = 'D'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].number === 30 && product[4].number < 71 ){zoneArea = 'E' }\n  else{ zoneArea ='--'}\n\n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].number < 52 ){  zoneCounter = product[5].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].number === 52 && product[6].number < 50 ){ zoneCounter =product[6].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].number === 50 && product[7].number < 51 ){ zoneCounter =product[7].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].number === 51 && product[8].number < 95 ){ zoneCounter =product[8].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number < 37 ){ zoneCounter =product[0].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number === 37 && product[1].number < 46 ){ zoneCounter =product[1].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number < 78 ){ zoneCounter =product[2].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number === 78 && product[3].number < 30 ){ zoneCounter =product[3].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].number === 30 && product[4].number < 71 ){ zoneCounter =product[4].number}\n  else{zoneCounter = 0 }\n\n/*const submitHandler =(e) =>{\n  e.preventDefault() //since submit handler is being called inside a form\n  dispatch(createProductReview(match.params.id,{\n    rating,\n    comment //both rating and comment are coming from local/comment state\n  }))\n}*/\n\n  \n\n      return(\n        <>\n        <center><p className='apapa'>LILYPOND</p></center>\n        <hr/>\n        <center><p className='greenBackground'><h2> ENTRANCE TICKET GENERATOR (FOR DEMO ONLY)</h2></p></center>\n        <hr/>\n        <center><p className='warningInstruction'><h6>PLEASE NOTE:</h6> Do not use this page at the exit facility, it is used for ENTRANCE only. Select 'exit' from the menu if you wish to process trucks leaving the park.</p></center>\n        <hr/>\n        <p className=\"appFont\">{/*ticketInfo && ticketInfo.URL*/}</p>\n        {/*loading ? <Loader/>:error ?<Message variant='danger'>{error}</Message>:*/(\n          <>\n          <Meta title={\"FLACS PARKING SYSTEM\"}/>\n         \n          <Row >\n           <Col md={5}>\n            \n            <Row>\n              <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              <Row>\n                   <Col className=\"appFont\">TAG NUMBER</Col>\n                   \n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <center>\n                <p className=\"bigNumber\" >\n                 {zoneCounter + 1}\n                 </p>\n                 </center>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row>\n                   <Col className=\"appFont\">PARK ZONE:</Col>\n                   <Col>\n                    <strong className=\"appFont\"> {zoneArea}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               </ListGroup >\n                \n                \n                \n                \n                {\n                /*<Row><h1> TAG NO</h1></Row>\n                <Row className=\"bigNumber\" > {'tagCounter'}</Row>\n                <Row>PARK ZONE</Row>\n                <Row>{'zoneCounter'}</Row>*/}\n              </Card>\n            </Row>\n           </Col>\n           \n            <Col md={6}>\n             <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              {/*<Form onSubmit={submitHandler}>*/}\n                 <Row className=\"appFont\">\n                   <Col>BOOKING NUMBER:</Col>\n                   <Col>\n                   <Form.Control as='input' className='inputBorder' value={email.bookingNo} onChange={(e) =>{setEmail({bookingNo:e.target.value, truckNumber:'',containerNumber:'',entryTime:'',entryDate:'',truckCategory:''})}}   />\n                   </Col>\n                  {/* <Col>\n                   <Button type='submit' variant='primary' onClick={fetchDetailsHandler}>Process</Button>\n                   </Col>*/}\n                 </Row>\n                 {/*</Form>*/}\n               </ListGroup.Item>\n              \n              \n              \n              <ListGroup.Item>\n                 <Row className=\"appFont\">\n                   <Col>TRUCK NUMBER:</Col>\n                   <Col>\n                   <Form.Control as='input' className='inputBorder' value={truckNumber} onChange={(e) =>{setTruckNumber(e.target.value)}}   />\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n               <ListGroup.Item>\n                 <Row className=\"appFont\">\n                   <Col>CONTAINER NUMBER:</Col>\n                   <Col>\n                   <Form.Control as='input' className='inputBorder' value={containerNumber} onChange={(e) =>{setContainerNumber(e.target.value)}}   />\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n\n               {\n               <ListGroup.Item>\n                  <Row className=\"appFont\">\n                    <Col>TRUCK CATEGORY:</Col>\n                    <Col>\n                    <Form.Control as='input' className='inputBorder' value={truckCategory} onChange={(e) =>{setTruckCategory(e.target.value)}}   />\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n             }\n\n\n               <ListGroup.Item>\n                 <Row >\n                   <Col className=\"appFont\">TICKET STATUS:</Col>\n                   <Col>\n                    <strong>{ticketInfo?ticketInfo.statusMessage:errorticket?errorticket:''}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row >\n                   <Col className=\"appFont\">URL:</Col>\n                   <Col>\n                   \n                     <strong>{ticketInfo && ticketInfo.URL}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n             \n               <ListGroup.Item>\n              \n                 <Button onClick={createTicketHandler}  className='btn-block printFont' type='button' >\n                 <i className='fas fa-print'></i> Generate Ticket\n                 </Button>\n                 \n\n               </ListGroup.Item>\n\n              </ListGroup>\n             </Card>\n            </Col>\n\n\n          </Row>\n          \n          {/*<Row>\n            <Col md={6}>\n              <h2>Reviews</h2>\n              {product.reviews.length === 0 && <Message>No Reviews </Message>}\n              <ListGroup variant=\"flush\">\n               {product.reviews.map(review =>( \n                 <ListGroup.Item key={review._id}>\n                  <strong>{review.name}</strong>\n                   <Rating value={review.rating} />\n                   <p>{review.createdAt.substring(0,10)}</p>\n                   <p>{review.comment}</p>\n                 </ListGroup.Item>\n               ) )}\n               <ListGroup.Item>\n                <h2>Write a Customer Review</h2>\n                {errorProductReview && <Message variant='danger'>{errorProductReview} </Message>}\n\n                {userInfo && (!userInfo.isAdmin || !userInfo.isMerchant)?(<Form onSubmit={submitHandler}>\n                <Form.Group controlId='rating'>\n                <Form.Label>Rating</Form.Label>\n                 <Form.Control as='select' value={rating} onChange={(e)=>setRating(e.target.value)}>\n\n                  <option value=''>Select...</option>\n                   <option value='1'>1-Poor</option>\n                   <option value='2'>2-Fair</option>\n                   <option value='3'>3-Good</option>\n                   <option value='4'>4-Very Good</option>\n                   <option value='5'>5-Excellent</option>\n\n                 </Form.Control>\n               </Form.Group>\n\n               <Form.Group controlId='comment'>\n                 <Form.Label>Comment</Form.Label>\n                 <Form.Control as='textarea' row='3' value={comment} onChange={(e)=>setComment(e.target.value)}>\n                 </Form.Control>\n               </Form.Group>\n\n              <Button type='submit' variant='primary'> Submit </Button>\n\n                </Form>):\n                  <Message> Please<Link to='/login'>sign in</Link> to write a review {' '} </Message>}\n               </ListGroup.Item>\n              </ListGroup>\n            </Col>\n                </Row> */}\n          </>\n        )}\n\n        </>\n      )\n\n}\n\nexport default ProductScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/CartScreen.js",["267","268"],"import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport {Row, Col , ListGroup, Image , Form ,Button, Card} from 'react-bootstrap'\nimport Message from '../components/Message.js'\nimport {addToCart,removeFromCart} from '../actions/cartActions.js'\n\nconst CartScreen = ({match, location, history}) => {\n      const productId = match.params.id\n      const qty =location.search ? Number( location.search.split('=')[1]):1\n\n    const dispatch = useDispatch()\n    const cart = useSelector(state => state.cart)\n\n    const {cartItems} = cart\n    console.log(cart)\n    \n    const userLogin = useSelector(state => state.userLogin)\n  const {loading,error,userInfo} = userLogin\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n    else if(userInfo.isMerchant||userInfo.isAdmin){\n     history.push(`/`)\n    }\n  })\n\n\n    useEffect(()=>{\n     if(productId){\n       dispatch(addToCart(productId ,qty))\n     }\n\n   },[dispatch,productId,qty])\n\n   const removeFromCartHandler =(id) => {dispatch(removeFromCart(id))}\n   const checkoutHandler = () => {history.push('/login?redirect=shipping')} //learn how redirect works properly\n\n   return (\n\n    <Row>\n     <Col md={8}>\n     <h1>Shopping Cart</h1>\n     {cartItems.length===0?<Message>Your cart is empty <Link to='/'>Go Back</Link></Message>:\n     (<ListGroup variant='flush'>\n      {cartItems.map(item =>{return(\n        <ListGroup.Item key ={item.product /*product is the ID here*/}>\n      <Row>\n       <Col md={2}>\n\n        <Image src={item.image} alt={item.name} fluid rounded></Image>\n\n       </Col>\n\n       <Col md={3}>\n        <Link to={`/product/${item.product /*product here is the id*/}`}>\n         {item.name}\n        </Link>\n       </Col>\n\n       <Col md={2}>\n        ₦ {item.price}\n       </Col>\n\n       <Col md={2}>\n       <Form.Control as='select' value={item.qty} onChange={(e) =>{dispatch(addToCart(item.product/*prod =id*/, Number(e.target.value)\n         )\n        )\n       }\n      } >\n         {[...Array(item.countInStock).keys()].map((x) =>(\n           <option key={x+1} value={x+1}>\n            {x +1}\n           </option>\n         ))}\n       </Form.Control>\n       </Col>\n\n       <Col md={2}>\n       <Button type='button' variant=\"light\" onClick={() => removeFromCartHandler(item.product\n        /*prod =id*/)}> \n\n         <i className=\"fas fa-trash\"></i> Remove\n\n        </Button>\n       </Col>\n\n       </Row>\n        </ListGroup.Item>\n      )})}\n     </ListGroup>)}\n     </Col>\n\n\n     <Col md={4}>\n      <Card>\n      <ListGroup variant='flush'>\n       <ListGroup.Item>\n        <h2>Subtotal ({cartItems.reduce((acc,item)=>\n          (acc + item.qty),0\n    )\n     }\n      ) items</h2>\n\n      ₦ {cartItems.reduce((acc,item)=>\n        (acc + item.qty*item.price),0\n  ).toFixed(2)\n   }\n\n      </ListGroup.Item>\n\n       <ListGroup.Item>\n         <Button type=\"button\" className='btn-block' disabled={cartItems.length===0} onClick={checkoutHandler}>\n         Proceed to Checkout\n         </Button>\n\n       </ListGroup.Item>\n\n      </ListGroup>\n      </Card>\n     </Col>\n\n    </Row>\n   )\n\n}\n\nexport default CartScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/LoginScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/RegisterScreen.js",["269","270"],"import React, {useState ,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Form, Button, Row, Col, ListGroup} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {register} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst RegisterScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmPassword,setConfirmPassword] = useState('')\n  const [isMerchant,setIsMerchant] = useState(false)\n  const [pickupAddress, setPickupAddress] =useState('')\n  const [momFirstName,setMomFirstName] = useState('is a merchant')\n  const [shoeSize,setShoeSize] = useState('is a merchant')\n  const [closestFriend,setClosestFriend] = useState('is a merchant')\n  const [childhoodStreet,setChildhoodStreet] = useState('is a merchant')\n  const [firstEmployment,setFirstEmployment] = useState('is a merchant')\n  const [message,setMessage] = useState(null)\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userRegister = useSelector(state => state.userRegister);\n  const {loading, error,userInfo } = userRegister\n     console.log(isMerchant)\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n  useEffect( () => {\n    if(userInfo){ //cuz user info exists only when you're logged in\n       history.push(redirect)\n    }\n\n    if(password !=='' && (password === confirmPassword)){\n      setMessage(null)\n    }\n\n    if(isMerchant===false){\n       setPickupAddress('') \n   setMomFirstName('is a merchant') \n   setShoeSize('is a merchant') \n   setClosestFriend('is a merchant') \n   setChildhoodStreet('is a merchant') \n   setFirstEmployment('is a merchant') \n    }\n\n\n    if(name!==''||email!==''||isMerchant && pickupAddress!==''||momFirstName!==''||shoeSize!==''||closestFriend!==''||childhoodStreet!==''||firstEmployment!==''){setMessage(null)}\n    \n  },[redirect,history,userInfo,password,confirmPassword,name,email,pickupAddress,momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment,isMerchant])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n       if(password !== confirmPassword){\n         setMessage('Passwords do not Match')\n      }else if(name === ''||email===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n      else if(isMerchant && pickupAddress===''){\n        setMessage('Please Make sure to fill in all entries!')\n      }\n       else if( !isMerchant && (momFirstName ==='is a merchant' || shoeSize ==='is a merchant'  || closestFriend==='is a merchant' || childhoodStreet==='is a merchant'  || firstEmployment==='is a merchant')){\n        setMessage('Please Make sure to fill in all entries!')\n       }\n       else{\n         //this is where we want to to call our action to dispatch login\n       dispatch(register(name,email,password, momFirstName,shoeSize,closestFriend,childhoodStreet,firstEmployment, pickupAddress,isMerchant)) /* follow the trail of this register dispatch to see where it leads  */\n       }\n\n  }\n\n    return (\n       <FormContainer>\n        <h1>Sign up</h1>\n        \n        {loading && <Loader/>}\n        <Form onSubmit={submitHandler}>\n  {/*1*/}      <Form.Group controlId='name'>\n\n         <Form.Label>  Name</Form.Label>\n         <Form.Control type='name' placeholder=\"enter name\" value={name} onChange={(e)=>setName(e.target.value)}></Form.Control>\n          {/*the value of form control is form control from the state.  need to read about form group from react bootstrap*/}\n        </Form.Group>\n\n  {/*2*/}        <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address </Form.Label>\n          <Form.Control type='email' placeholder=\"enter email\" value={email} onChange={(e)=>setEmail(e.target.value)}></Form.Control>\n           {/*the value of form control is form control from the state. need to read about form group from react bootstrap*/}\n         </Form.Group>\n\n         <fieldset>\n         {/*3*/}        <Form.Group controlId='usertype'>\n\n         <Form.Label>  Are you a customer or a merchant? </Form.Label>\n          <div className=\"mb-3\"></div>\n         <Form.Check inline type='radio' name='radiosInline' id='radiosInline1' label=\"Customer\" onChange={(e)=>setIsMerchant(false)}/>\n          <Form.Check inline type='radio' name='radiosInline' id='radiosInline2' label=\"Merchant\" onChange={(e)=>setIsMerchant(true)}/>\n           \n         </Form.Group>\n         </fieldset>\n\n           {/*4*/ isMerchant &&  \n           \n              <ListGroup>\n              <ListGroup.Item>\n                \n           <Form.Group controlId='pickup-address'>\n\n          <Form.Label> What is your address (for pickup of goods)? </Form.Label>\n          <Form.Control type='input' placeholder=\"enter pickup location\" value={pickupAddress} onChange={(e)=>setPickupAddress(e.target.value)}></Form.Control>\n           \n         </Form.Group> \n          </ListGroup.Item>\n          </ListGroup>}\n\n\n  {/*5*/}      <Form.Group controlId='password'>\n\n          <Form.Label>  Password  </Form.Label>\n          <Form.Control type='password' placeholder=\"enter password\" value={password} onChange={(e)=>setPassword(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n {/*5*/}      <Form.Group controlId='confirmPassword'>\n\n                 <Form.Label>  Confirm password  </Form.Label>\n                 <Form.Control type='password' placeholder=\"confirm password\" value={confirmPassword} onChange={(e)=>setConfirmPassword(e.target.value)}></Form.Control>\n\n                </Form.Group>\n\n             \n             <br/>\n             <br/>\n             {(  password !=='' && (password === confirmPassword)) && <Message variant='success'>Passwords are a match! {!isMerchant && 'please fill in the section below'}.</Message> } \n             {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n              \n             {( !isMerchant && password !=='' && (password === confirmPassword)) && \n            <> <h1>Personal Identifier Questions</h1>\n               <p>We use this data to confirm it's you, upon purchase</p>\n            </>}\n       \n             <br/>\n             <br/>\n\n            { (!isMerchant && password !=='' && (password === confirmPassword)) && \n             \n            <>\n          <ListGroup>\n            <ListGroup.Item className=\"my-3\">\n\n          <Form.Group controlId='momFirstName'>\n        \n         <Form.Label> What is your mother's first name ?   </Form.Label>\n          <Form.Control type='input'  /*value={momFirstName}*/ onChange={(e)=>setMomFirstName(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='shoeSize'>\n        \n        <Form.Label> What is your shoe size?   </Form.Label>\n        <Form.Control type='input'  /*value={shoeSize}*/ onChange={(e)=>setShoeSize(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='closestFriend'>\n        \n        <Form.Label> What is the name of your closest friend ?   </Form.Label>\n        <Form.Control type='input' /*value={closestFriend}*/ onChange={(e)=>setClosestFriend(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='childhoodStreet'>\n        \n       <Form.Label> What is the name of the street you lived on as a child ?   </Form.Label>\n        <Form.Control type='input' placeholder=\"please make sure to spell your answers correctly\" /*value={childhoodStreet}*/ onChange={(e)=>setChildhoodStreet(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='firstEmployment'>\n        \n         <Form.Label> What is the name of the first place you worked at (employment) ?   </Form.Label>\n        <Form.Control type='input' /*value={firstEmployment}*/ onChange={(e)=>setFirstEmployment(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        </ListGroup.Item>\n          </ListGroup>\n        </>\n       }\n        <br/>\n          <Button type='submit' variant='primary'>Register</Button>\n        </Form>\n\n        <Row className='py-3'>\n         <Col>\n           Have an account?<Link to={/*redirect?`$login/redirect=${redirect}`:*/'/login'}> Login</Link>\n         </Col>\n        </Row>\n\n       </FormContainer>\n\n    )\n\n}\n\nexport default RegisterScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/ProfileScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/ShippingScreen.js",["271","272"],"import React, {useState,useEffect} from 'react'\n\nimport {Form, Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport FormContainer from '../components/FormContainer.js'\nimport CheckoutSteps from '../components/CheckoutSteps.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {saveShippingAddress} from '../actions/cartActions.js'\n//savePaymentMethod,\n\n\nconst ShippingScreen = ({history}) => {\n  const cart = useSelector(state => state.cart)\n  const {shippingAddress} = cart\n\n\n\n      const[address, setAddress] =useState(shippingAddress.address) //the useState values were all in quotation marks previously\n      const[city, setCity] =useState(shippingAddress.city)\n      const[postalCode,setPostalCode] =useState(shippingAddress.postalCode)\n      const[country,setCountry] =useState(shippingAddress.country)\n\n\n  const dispatch = useDispatch()\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n\n    window.history.pushState(null,'','/')\n    dispatch(saveShippingAddress({address, city, postalCode, country}))\n    history.push('/placeorder')  //once again , this is to redirect the url to the next page\n  }\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {loading,error,userInfo} = userLogin\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n\n    \n  })\n\n\n      return(\n        <FormContainer>\n         <CheckoutSteps step1 step2/>\n         <h1>Shipping</h1>\n\n         <Form onSubmit={submitHandler}>\n         <Form.Group controlId='address'>\n{/*1*/}\n                <Form.Label>  Address</Form.Label>\n                <Form.Control type='text' placeholder=\"Enter address\" value={address} required onChange={(e)=>setAddress(e.target.value)}></Form.Control>\n\n         </Form.Group>\n\n         <Form.Group controlId='city'>\n{/*2*/}           <Form.Label>  City</Form.Label>\n                <Form.Control type='text' placeholder=\"enter city\" value={city} required onChange={(e)=>setCity(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n\n        <Form.Group controlId='postalCode'>\n\n{/*3*/}          <Form.Label> Postal Code</Form.Label>\n               <Form.Control type='text' placeholder=\"Enter postal code\" value={postalCode} required onChange={(e)=>setPostalCode(e.target.value)}></Form.Control>\n\n        </Form.Group>\n\n        <Form.Group controlId='country'>\n\n{/*4*/}          <Form.Label>  Country</Form.Label>\n               <Form.Control type='text' placeholder=\"enter country\" value={country} required onChange={(e)=>setCountry(e.target.value)}></Form.Control>\n\n        <Button type='submit' variant='primary'>Continue</Button>\n      </Form.Group>\n\n\n\n         </Form>\n\n\n        </FormContainer>\n      )\n\n\n}\n\nexport default ShippingScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/PaymentScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/PlaceOrderScreen.js",["273","274","275","276","277","278"],"import React, {useEffect,useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport { Button, Row ,Col, Form , ListGroup, Image, Card, FormControl} from 'react-bootstrap'\n//you may need to import form container, seeing as you have used a form\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n\nimport {createOrder} from '../actions/orderActions.js'\nimport {answerVerify} from '../actions/userActions.js'\nimport CheckoutSteps from '../components/CheckoutSteps.js'\n\n\n\nconst PlaceOrderScreen =  ({history}) => {\n   const dispatch = useDispatch()\n   const cart = useSelector(state => state.cart)\n   const userLogin = useSelector(state => state.userLogin)\n   const {loading,error:error2,userInfo} = userLogin\n   \n  console.log(cart)\n\n   const clientId = userInfo._id\n   const userVerify = useSelector(state => state.userVerify)\n   const {loading:loading1 , confirmedState} = userVerify\n\n   const orderCreate = useSelector(state => state.orderCreate )\n  const {order,success,error} = orderCreate /*come change this back to error later */\n  \n// confirmedStates.confirmedStates is initially empty and that breaks the whole thing -confirmedState that you just extracted, is an object mind you, so its confirmedState.confirmedState\n\n  //STATE REGARDING USER CONFIRMATION\n  const [consentQuestion, setConsentQuestion] =useState('hidden') \n  const [confirmQuestion ,setConfirmQuestion]=useState('')\n  const [confirmedStates,setConfirmedStates] = useState('')\n  const [personalIdAnswer, setpersonalIdAnswer] = useState('')\n  const [confirmedMessage, setConfirmedMessage] = useState('')\n  const [presentQuestion, setPresentQuestion] = useState('')\n  const [personalIdQuery, setPersonalIdQuery] = useState('')\n  const [proceed,setProceed] = useState('')\n  /*THE FACE OF THE BUTTON UNDER THE CONFIRM SECTION \n  i have put this in the use effect, lets see if it works well*/\n\n  let buttonLabel = 'Send'\n  if(confirmedStates === 'true'){\n   buttonLabel = 'PLACE ORDER'\n  }else if(confirmedStates === 'false'){\n     buttonLabel = 'TRY AGAIN'\n  }else if(proceed === 'true'){\n    buttonLabel = 'ORDER DETAILS'\n }\n  else{buttonLabel='Send'}\n    \n  //CALCULATING THE PRICES\n  const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n\n    cart.deliveryCost = addDecimals(cart.itemsPrice > 10000 ? 0 : 500)\n\n    /*cart.taxPrice = addDecimals(Number((0.10*cart.itemsPrice).toFixed(2)))*/\n\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.deliveryCost) /*+ Number(cart.taxPrice)*/).toFixed(2)\n   //if your total price is looking funny, just unwrap addDecimals and wrap in .toFixed(2)\n\n  \n    \n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n      \n     \n    if( confirmedState && confirmedState.confirmedState === 'true'){ \n    /*dispatch(createOrder({\n      orderItems:cart.cartItems,\n      shippingAddress:cart.shippingAddress,\n       \n      itemsPrice:cart.itemsPrice,\n      deliveryCost:cart.deliveryCost,\n      taxPrice:cart.taxPrice,\n      totalPrice:cart.totalPrice\n      \n    }))*/\n \n    setConfirmedStates('true')\n    setConfirmedMessage('green banner')\n    }\n    else if( confirmedState && confirmedState.confirmedState === 'false'){\n      setConfirmedStates('false')\n      setConfirmedMessage('red banner')\n    }\n   \n  \n\n  },[confirmedState,confirmedStates,userInfo,dispatch,cart/*history,success,order._id*/])\n\n  useEffect(()=>{\n    if(order){\n      setProceed('true')\n      console.log(order)\n    }\n    else{\n      console.log(\"ORDER IS STILL EMPTY!!\")\n    }\n      \n    /*window.history.pushState(null,'','/')*/\n   },[order])\n\nconst showConsentHandler = () => {\n  setConsentQuestion('visible')\n}\n\nconst hideConsentHandler = () => {\n  setConsentQuestion('hidden')\n  setConfirmQuestion('hidden')\n}\n\nconst confirmHandler = () => {\n  setConfirmQuestion('visible')\n  \n  //RANDOM QUESTION CODE\n  const randomNumber = Math.floor((Math.random()*5))\n  const questionsArray = ['What is your mother\\'s first name ?','What is your shoe size?','What is the name of your closest friend ?','What is the name of the street you lived on as a child ?','What is the name of the first place you worked at (employment) ?']\n   const propertyArray = ['momFirstName','shoeSize','closestFriend','childhoodStreet','firstEmployment'] \n   \n   const presentQuestion = questionsArray[randomNumber] \n   setPresentQuestion(presentQuestion) /*i did a little function scope here */\n\n   const personalIdQuery = propertyArray[randomNumber]\n   setPersonalIdQuery(personalIdQuery) /*i did a little function scope here (same principle)*/\n}\n\n\n   \n   \n   \n/*maybe place this bit of code in a better position \n if(confirmedState === 'true'){\n  setConfirmedMessage('green banner')\n\ndispatch(createOrder({\n  orderItems:cart.cartItems,\n  shippingAddress:cart.shippingAddress,\n  paymentMethod:cart.paymentMethod,\n  itemsPrice:cart.itemsPrice,\n  shippingPrice:cart.shippingPrice,\n  taxPrice:cart.taxPrice,\n  totalPrice:cart.totalPrice\n\n}))\n}\nelse if(confirmedState === 'false'){\nsetConfirmedMessage('red banner')\n}\n */\n\nconst submitHandler = (e) => {\n  e.preventDefault()\n\n  /*I WANT THIS BUTTON TO SERVE MULTIPLE FUNCTIONS, FIRST OF WHICH IS TO CHECK IF THE PERSONS ANSWER MATCHES UP, VIA THE DISPATCH BELOW */\n  if(confirmedStates === ''){dispatch(answerVerify(clientId,personalIdQuery, personalIdAnswer))\n  \n  }else if(confirmedStates === 'true'){\n    dispatch(createOrder({\n      orderItems:cart.cartItems,\n      shippingAddress:cart.shippingAddress,\n       /* i removed paymentMethod:cart.paymentMethod */\n      itemsPrice:cart.itemsPrice,\n      deliveryCost:cart.deliveryCost,\n      taxPrice:cart.taxPrice,\n      totalPrice:cart.totalPrice\n      \n    }))\n      \n      \n   }\n  else if(confirmedStates === 'false'){\n   \n     /*buttonLabel ='SEND'*/\n    const randomNumber = Math.floor((Math.random()*5))\n  const questionsArray = ['What is your mother\\'s first name ?','What is your shoe size?','What is the name of your closest friend ?','What is the name of the street you lived on as a child ?','What is the name of the first place you worked at (employment) ?']\n   const propertyArray = ['momFirstName','shoeSize','closestFriend','childhoodStreet','firstEmployment'] \n   \n   const presentQuestion = questionsArray[randomNumber] \n   setPresentQuestion(presentQuestion) \n\n   const personalIdQuery = propertyArray[randomNumber]\n   setPersonalIdQuery(personalIdQuery) \n\n   confirmedState.confirmedState = '' /*you gotta dispatch something here that'll make confirmedState.confirmedState === '' */\n  setConfirmedMessage('')\n  setConfirmedStates('')\n  }\n\n  /*if(proceed==='true'){\n    history.push(`/order/${order._id}`)\n  }*/\n  \n}\n \n\n        return(\n         <>\n        <CheckoutSteps step1 step2 step3 step4/>\n        <Row>\n         <Col md={8}>\n\n          <ListGroup variant=\"flush\">\n           <ListGroup.Item>\n             <h2>Delivery</h2>\n             <p>\n             <strong>Address:</strong>\n             {cart.shippingAddress.address},{cart.shippingAddress.city}{' '},\n             {cart.shippingAddress.postalCode}{' '},{cart.shippingAddress.country}\n             </p>\n            </ListGroup.Item>\n\n             {/* <ListGroup.Item>\n               <h2>Payment Method</h2>\n                <strong>Method:</strong>\n                {cart.paymentMethod /*this item doesnt exist anymore }\n             </ListGroup.Item> */}\n\n             <ListGroup.Item>\n              <h2>Order Items</h2>\n\n               {cart.cartItems.length === 0 ? <Message>Your cart is empty </Message>:(\n                <ListGroup variant=\"flush\">\n                  {cart.cartItems.map((item, index) =>(\n\n                    <ListGroup.Item key ={index}>\n                    <Row>\n                     <Col md={1}>\n                      <Image src={item.image} alt={item.name} fluid rounded/>\n                      <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                       {item.name}\n                      </Link>\n                      </Col>\n                       <Col md={4}>\n                       {item.qty} x ₦{item.price} = {item.qty*item.price}\n                       </Col>\n\n                      </Row>\n\n                    </ListGroup.Item>\n\n                  ))}\n                </ListGroup>\n               ) }\n            </ListGroup.Item>\n          </ListGroup>\n         </Col>\n\n         <Col md={4}>\n           <Card>\n              <ListGroup>\n               <ListGroup.Item>\n                <h2>Order Summary</h2>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Items </Col>\n                 <Col>₦ {cart.itemsPrice} </Col>\n\n                </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Delivery Cost </Col>\n                 <Col>₦ {cart.deliveryCost} </Col>\n\n                </Row>\n               </ListGroup.Item>\n\n               {/*<ListGroup.Item>\n                <Row>\n\n                 <Col>Tax </Col>\n                 <Col>₦ {cart.taxPrice} </Col>\n\n                </Row>\n               </ListGroup.Item> */}\n\n               <ListGroup.Item>\n                <Row>\n\n                 <Col>Total </Col>\n                 <Col>₦ {cart.totalPrice} </Col>\n\n                </Row>\n               </ListGroup.Item>\n                {/*place error here*/}\n                <ListGroup.Item>\n                 {error&&<Message variant='danger'>{error} </Message>}\n                </ListGroup.Item>\n\n               <ListGroup.Item> <Button type='button' className='btn-block' disabled={cart.cartItems.length === 0 || confirmedStates === 'true'} onClick={showConsentHandler}>\n               Proceed to Place Order\n               </Button>\n               </ListGroup.Item>\n\n             </ListGroup>\n           </Card>\n         \n           {/*okay so I want this card to be activated when the place order button has been clicked*/\n           /*there should be a consent radio button, that confirms for the user's permission, or hides*/\n           /*the card if the user says no */}  \n             { consentQuestion === 'visible' &&\n               <>\n             <Card>\n               <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 <Col>Do you agree to having ₦ {cart.totalPrice} taken from your account ?</Col>\n                </Row>\n          \n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <Row>\n                  <Col></Col>\n                Yes{' '}\n                  <Col>\n                  <input type=\"radio\"  id=\"yes\" value=\"yes\" onChange={confirmHandler}/>\n                  </Col>\n                 \n                  No{' '}\n                  <Col>\n                  <input type=\"radio\" id=\"no\" value=\"no\"  onChange={hideConsentHandler} />\n                  </Col>\n                  \n                </Row>\n          \n               </ListGroup.Item>\n               </ListGroup>\n             </Card>\n             </>}\n             { confirmQuestion === 'visible' &&\n               <>\n             <Card>\n\n             <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 <Col><strong>Just so we know it's you:</strong></Col>\n                </Row>\n                {/*<br/>*/}\n               </ListGroup.Item>\n               </ListGroup>\n\n               <ListGroup>\n             <ListGroup.Item>\n                <Row>\n\n                 {/*<Col>{presentQuestion}</Col>*/}\n                </Row>\n        <Form onSubmit={submitHandler}>\n          <Form.Group controlId='reply-message'>\n\n           <Form.Label>{presentQuestion} </Form.Label>\n            {\n           confirmedMessage=== 'green banner'?\n            (<Message variant='success'>Verified!</Message>):\n            (proceed==='true'?(<Message variant='success'>Order Placed!</Message>):(confirmedMessage === 'red banner'?\n            (<Message variant='danger'>Not verified. </Message>):\n   (<Form.Control as =\"textarea\" variant='danger' rows={1} plaintext value = {personalIdAnswer} onChange ={(e)=>{setpersonalIdAnswer(e.target.value)}}></Form.Control>)))\n            }\n            {proceed==='true' &&(<Message variant='success'>Order Placed!</Message>)}\n              \n              \n               {/*i hope to change the text-area to a message component,\n                regardless of what comes back, if it's positive, it should close the whole\n                thing, just like the no option does, but this time\n                , disabling the place order button. if its negative, consider a fail message \n                saying \"payment confirmation failed\" where the payment confirmed would have been,\n                maybe also close the whole thing */}\n           <br/>\n          {proceed==='' &&<Button type='submit' variant='primary'>{buttonLabel}</Button>}\n           {'  '}\n          {proceed==='true' && <LinkContainer to=\"/\">\n          <Button  variant='primary'>GO HOME</Button>\n          </LinkContainer>}\n          {'  '}\n          {proceed==='true' && <LinkContainer to={`/order/${order._id}`}>\n          <Button  variant='primary'>ORDER DETAILS</Button>\n          </LinkContainer>}\n          \n         </Form.Group>\n      </Form>\n                <Row>\n                  \n                </Row>\n               </ListGroup.Item>\n               </ListGroup>\n             </Card>\n             </> }\n         </Col>\n        </Row>\n         </>\n\n        )\n}\n\n\nexport default PlaceOrderScreen;\n","/home/dagogo/Desktop/car-park/frontend/src/screens/OrderScreen.js",["279","280","281","282","283","284"],"import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport {PayPalButton} from 'react-paypal-button-v2'\nimport { Button, Row ,Col ,Form, ListGroup, Image, Card, ListGroupItem} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\n//import {getUserDetails, updateUserProfile} from '../actions/userActions.js'\nimport {getOrderDetails,payOrder,deliverOrder,merchantApproveOrder/*,merchantLockOrder*/} from '../actions/orderActions.js'\nimport Loader from '../components/Loader.js'\nimport {ORDER_PAY_RESET,ORDER_DELIVER_RESET } from '../constants/orderConstants.js'  //HE MADE AN EXCEPTION HERE DISPATCHING STRAIGHT FROM CONSTANTS WITHOUT CALLING ACTIONS, TO MAKE THINGS FASTER\n\n\nconst OrderScreen =  ({match,history}) => {\n     const [sdkReady,setSdkReady] = useState('false') // this is our piece of local state for when the SDK is ready\n\n\n\n   const orderId = match.params.id\n   const dispatch = useDispatch()\n  //const cart = useSelector(state => state.cart) come back and check why you commented this out\n\n const [merchantProductsArray,setMerchantProductsArray] = useState('') /*i never actually change the state of this */\n const [promisedQtyArray,setPromisedQtyArray] = useState('')\n const [committedValue, setCommittedValue] = useState('')\n const [productId,setProductId] = useState('')\n const [highlight,setHighlight] = useState('13px')\n const [colour, setColour] = useState('black')\n  const orderDetails = useSelector((state) => state.orderDetails )\n  const {order,loading,error} = orderDetails\n   /*console.log(order)*/\n  \n \n\n   \n\n   const userLogin = useSelector((state) => state.userLogin )\n  const {userInfo} = userLogin\n\n  const orderPay = useSelector((state) => state.orderPay )\n  const {loading:loadingPay, success:successPay} = orderPay //this is renaming what you destructured, not making a new object\n\n  const orderDeliver = useSelector((state) => state.orderDeliver )\n  const {loading:loadingDeliver, success:successDeliver} = orderDeliver\n\nif(!loading){\n  //calculating the prices for orders\n const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n\n order.itemsPrice = addDecimals(order.orderItems.reduce((acc, item)=>acc +item.price*item.qty,0))\n order.promisedQtyArray = promisedQtyArray\n order.merchantProductsArray = merchantProductsArray\n /*order.initalState = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))*/\n}\n\n const initialState = function(order,item){\n  const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n  setMerchantProductsArray(vendorArray)\n  const promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (promisedQtyArray[vendorArray.indexOf(item)]))\n  setPromisedQtyArray(promisedArray)\n  console.log(typeof(promisedQtyArray),promisedQtyArray)\n }\n\n\n\n const liveUpdate =function(e,item){\n   /*const vendorArray = order.orderItems.filter((item) => (item.vendor === userInfo.name))\n    setMerchantProductsArray(vendorArray)*/\n/*const copyArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty)) /*i need to call this ONCE,not everytime the function is called so bring it out of this function */\n             const copyArray = promisedQtyArray         \n         copyArray[merchantProductsArray.indexOf(item)] = Number(e.target.value)\n    \n                     setPromisedQtyArray(copyArray)\n                     /*console.log(promisedQtyArray,merchantProductsArray)*/\n                     console.log(copyArray,promisedQtyArray)\n                    }\n\n//AN ARRAY TO CORRESPOND WITH THE LENGTH THE VENDORS ITEMS THAT ARE DISPLAYED ON SCREEN, SO WE CAN EASILY CHANGE ITEM AMOUNTS ON SCREEN\n/*let promisedQtyArray = order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n  0\n))*/\n\n//AN ARRAY TO FILTER ORDER ITEMS THAT HAVE A PARTICULAR VENDOR, TO HELP US PICK promisedQtyArray element, in the order items  \n/*const merchantProductsArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name))*/\n\n/*useEffect(()=>{\n  if(!order){promisedArray = []}\n  else{ promisedArray =  order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item) => (item.promisedQty))\nsetPromisedQtyArray(promisedArray)}\n\n  if(!order){vendorArray =[]}\n  else{vendorArray=order.orderItems.filter((item) => (item.vendor === userInfo.name))}\n  setMerchantProductsArray(vendorArray)\n  \n\n},[order,promisedArray,vendorArray])*/\n\n\n\n\n\nuseEffect(()=> { \n       if(!userInfo){\n         history.push('/login')\n       }\n      \n       /*setPromisedQtyArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n        0\n      ))) \n       setMerchantProductsArray(order.orderItems.filter((item) => (item.vendor === userInfo.name)))*/\n\n  const addPayPalScript = async () => {\n    const {data:clientId} = await axios.get('/api/config/paypal')\n    const script = document.createElement('script') //this script being created will not be in the source code, cuz it comes to life AFTER the source code loads\n    script.type ='text/javascript'\n    document.body.appendChild(script)\n    script.async=true\n    script.onload =()=> {  \n        setSdkReady(true)\n    }\n    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}` //this is the software development kit that paypal gives us\n    \n  }\n\n\n  if(!order||successPay||successDeliver){\n    dispatch({type:ORDER_PAY_RESET})\n    dispatch({type:ORDER_DELIVER_RESET})  //AGAIN HE MADE AN EXCEPTION HERE AND DISPATCHED STRAIGHT FROM CONSTANTS SO HE CAN KEEP IT SHORT\n\n    dispatch(getOrderDetails(orderId))}\n\n  else if(!order.isPaid){\n    if(!window.paypal){\n      addPayPalScript()\n    }\n    else{ setSdkReady(true) }\n  }\n},[dispatch,orderId,successPay,successDeliver,order,history,userInfo])\n\nconst successPaymentHandler = (paymentResult) => {\n   console.log(paymentResult)\n  dispatch(payOrder(orderId, paymentResult))\n\n}\n\nconst deliverHandler = ()=> {\n  dispatch(deliverOrder(order))\n}\n\nconst submitHandler = (e) => {\n    e.preventDefault()\n    if( promisedQtyArray==='' ){window.alert('please select a value before committing!')}\n    else if(typeof((promisedQtyArray.reduce((acc, item)=>acc +item,0)))!=='number'){window.alert('You cannot commit zero,please contact admin if you are out of stock')}\n    else{dispatch(merchantApproveOrder(order._id, productId, committedValue))}\n}\n /*is there a factor of 18/19 to consider for, --yes */\n/*const merchantTotal = order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.qty),0)*/\n\n        return loading ?( <Loader/> ):error ?( <Message variant='danger'>{error} </Message>):\n(<>\n\n    <h1>Order ID: {order._id}</h1>\n    <Row>\n     <Col md={8}>\n\n      <ListGroup variant=\"flush\">\n       <ListGroup.Item>\n         <h2>Delivery</h2>\n        <p> {userInfo.isMerchant||userInfo.isAdmin?(<strong>Order placed by:</strong>):(<strong>Name:</strong>) }{'   '}{order.user.name}</p>\n\n       { !userInfo.isMerchant &&\n       <>\n       <p> <strong>Email:</strong>{' '} <a href= {`mailto:${order.user.email}`}>{order.user.email}</a> </p>\n          <p>\n         <strong>Address:</strong>\n         {order.shippingAddress.address},{order.shippingAddress.city}{' '},\n         {order.shippingAddress.postalCode}{' '},{order.shippingAddress.country}\n         </p>\n         \n      </> }\n\n         {order.isDelivered ?<Message variant='success'>Delivered on {order.deliveredAt}</Message> :\n                        <Message variant='danger'> Not delivered</Message> }\n\n          </ListGroup.Item>\n\n          {/*<ListGroup.Item>\n           <h2>Payment Method</h2>\n\n            <p>\n            <strong>Method:</strong>\n            {order.paymentMethod}\n            </p>\n       {order.isPaid ?<Message variant='success'>Paid on {order.paidAt}</Message> :\n                      <Message variant='danger'> Not paid</Message> }\n           </ListGroup.Item>*/}\n\n           <ListGroup.Item>\n           <ListGroup>\n             <ListGroupItem>\n            <h2>Order Items</h2>\n          <Row>\n          {!userInfo.isMerchant && <Col md={2}>S/N</Col>}\n          <Col md={2}>Item</Col>\n          <Col md={2}>Vendor</Col>\n          {userInfo.isMerchant?(<Col md={4}>How many can you fulfill?</Col>):(userInfo.isAdmin && <Col md={2}>Merchant's promised amount)</Col>)}\n          {userInfo.isMerchant && <Col md={2}>Item Total</Col>}\n          \n          {!userInfo.isMerchant && <Col md={2}>Total</Col>}\n          \n          </Row>\n          </ListGroupItem>\n          </ListGroup>\n          { order.orderItems.length === 0 ? ( <Message>Order is empty </Message>):(userInfo.isMerchant ?\n            (<>\n               \n            <ListGroup variant=\"flush\">\n              { \n                /*merchantItems = order.orderItems.filter((item) => (item.vendor === userInfo.vendor))*/\n                order.orderItems.filter((item) => (item.vendor === userInfo.name)).map((item, index) =>(\n                   \n                <ListGroup.Item key ={index}>\n                <Row>\n                {/*<Col md={2}>{index + 1}</Col>*/}\n                 <Col md={2}>\n                  <Image src={item.image} alt={item.name} fluid rounded/>\n                  <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                   {item.name}\n                  </Link>\n                  </Col>\n                  <Col md={2}>\n                   {item.vendor}\n                   </Col>\n                   \n                   <Col md={4}>\n                 <Form className=\"form-inline\" onSubmit={submitHandler}>\n                   \n                   <Form.Group>\n                   <Form.Row>\n                   <Col md={2}>\n                   <Form.Control as='select' defaultValue={0} onMouseEnter ={(e)=>{initialState(order,item)}} onChange ={(e)=>{   \n                                                                   liveUpdate(e,item) \n                                                                   setCommittedValue(Number(e.target.value))\n                                                                   setProductId(item.product)\n                                                                                \n                                                                                }}>\n          {[...Array(item.qty+1).keys()].map((x) =>(\n            <option key={x} value={x} disabled={item.merchantPromise} >\n             {x}\n            </option>\n             \n          ))}\n               \n        </Form.Control>\n        \n                  </Col>\n                   \n                  </Form.Row>\n                  </Form.Group>\n                    \n                   <Form.Group>\n                   <Form.Row>\n                   \n                   <Col md={{span:2,offset:2}}>\n                   \n                      <Button type='submit' variant='primary' className='btn-sm' onMouseDown={(e)=>{ /*setHighlight('16px') setColour('green')*/}} onMouseUp={(e)=>{/*setHighlight('13px') setColour('black')*/}}>\n                       COMMIT\n                    \n                       </Button>\n                   </Col>\n                   </Form.Row>\n                   </Form.Group>\n              </Form>\n              </Col>\n                   <Col md={3} style={{fontSize:highlight, color:colour}}>\n                   {promisedQtyArray===''?(item.promisedQty):(typeof(promisedQtyArray[merchantProductsArray.indexOf(item)])!=='number'? 0:promisedQtyArray[merchantProductsArray.indexOf(item)])} x ₦ {item.price} = ₦ {(promisedQtyArray===''?(item.promisedQty):(typeof(promisedQtyArray[merchantProductsArray.indexOf(item)])!=='number'? 0:promisedQtyArray[merchantProductsArray.indexOf(item)]))*item.price}\n                   </Col>\n\n                  </Row>\n\n                </ListGroup.Item>\n              ))}\n              </ListGroup>\n          </>):\n            (\n            <ListGroup variant=\"flush\">\n              {order.orderItems.map((item, index) =>(\n\n                <ListGroup.Item key ={index}>\n                <Row>\n                <Col md={2}>{index + 1}</Col>\n                 <Col md={2}>\n                  <Image src={item.image} alt={item.name} fluid rounded/>\n                  <Link to={`product/${item.product}`/*remember product property is the id in the cart*/}>\n                   {item.name}\n                  </Link>\n                  </Col>\n                  <Col md={2}>\n                   {item.vendor}\n                   </Col>\n                   \n                   {userInfo.isAdmin && <Col md={4}>\n                   {item.promisedQty}\n                   </Col>}\n\n                   <Col md={3}>\n                   {item.qty} x ₦ {item.price} = ₦ {item.qty*item.price}\n                   </Col>\n\n                  </Row>\n\n                </ListGroup.Item>\n                )\n              )}\n            </ListGroup>\n           ))\n               } \n               \n               </ListGroup.Item>\n      </ListGroup>\n     </Col>\n\n     <Col md={4}>\n      {(!userInfo.isAdmin && !userInfo.isMerchant) && <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <h2>Order Summary</h2>\n           </ListGroup.Item>\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col> Items </Col>\n             <Col>₦ {order.itemsPrice} </Col>\n               \n            </Row>\n           </ListGroup.Item>\n\n           \n\n            <ListGroup.Item>\n            <Row>\n\n             <Col>Delivery Cost </Col>\n             <Col>₦ {order.deliveryCost} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n            \n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Total </Col>\n             <Col>₦ {order.totalPrice} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n\n\n         </ListGroup>\n       </Card> }\n         \n         \n       { userInfo.isMerchant && <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <h2>Order Summary</h2>\n           </ListGroup.Item>\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Expected total: </Col>\n             <Col>₦ {(order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.qty),0)).toFixed(2)} </Col> \n               \n            </Row>\n           </ListGroup.Item>\n\n           <ListGroup.Item>   \n            <Row>\n\n             <Col> Total Fulfillable: </Col>\n             <Col>₦ {order.itemsPrice} </Col> {/*gotta come change this, and effect the price in the total as well */}\n               \n            </Row>\n           </ListGroup.Item>\n\n            <ListGroup.Item>\n            <Row>\n\n             <Col>Delivery Cost: </Col>\n             <Col>₦ {order.deliveryCost} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n            \n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>Total </Col>\n             <Col>₦ {(Number(order.deliveryCost) + Number(order.orderItems.filter((item) => (item.vendor === userInfo.name)).reduce((acc, item)=>acc +(item.price*item.qty),0))).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n\n\n         </ListGroup>\n       </Card> }\n\n\n\n       {userInfo.isAdmin && <Card>\n          <ListGroup variant='flush'>\n           <ListGroup.Item>\n            <h2>Teller Transactions</h2>\n           </ListGroup.Item>\n\n           <ListGroup.Item>\n            <p>Please, ONLY perform these transactions when\n            the respective merchants have confirmed that they can deliver the goods. </p>\n           </ListGroup.Item>\n\n\n           <ListGroup.Item>\n            <Row>\n\n             <Col>TO BridgeWay Co-operative Account: </Col>\n             <Col>₦ {(order.itemsPrice * (1/19) ).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n      {order.orderItems.map((item, index) =>(\n            <ListGroup.Item  key ={index}>\n            <Row>\n\n             <Col> {index + 1}. TO {item.vendor} account:  </Col>\n             <Col>₦ {((18/19) * item.price).toFixed(2) * item.qty } </Col>\n\n            </Row>\n           </ListGroup.Item>\n           ))}\n      \n      <ListGroup.Item>\n            <Row>\n\n             <Col>To dispatch rider account: </Col>\n             <Col>₦ {(Number(order.deliveryCost)).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n\n        <ListGroup.Item>\n            <Row>\n\n             <Col>Total: </Col>\n             <Col>₦ {(order.totalPrice).toFixed(2)} </Col>\n\n            </Row>\n           </ListGroup.Item>\n      \n           \n          {/*!order.isPaid && (\n            <ListGroup.Item>\n             {loadingPay && <Loader/>}\n             {!sdkReady ?<Loader/> :(<PayPalButton amount ={order.totalPrice} onSuccess={successPaymentHandler}/>)  }\n            </ListGroup.Item>\n          )*/}\n\n       {loadingDeliver && <Loader/>}\n      {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n        <ListGroup.Item>\n        <Button type='button' className='btn btn-block' onClick={deliverHandler}> Mark As Delivered</Button>\n        </ListGroup.Item>\n      )}\n\n         </ListGroup>\n       </Card>}\n     </Col>\n    </Row>\n   \n   \n\n</>)\n}\n\n\nexport default OrderScreen;\n","/home/dagogo/Desktop/car-park/frontend/src/screens/OrderListScreen.js",["285"],"import React ,{ useEffect } from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Button} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {listOrders} from '../actions/orderActions.js'\n\n\n\n\n\nconst OrderListScreen = ({history}) => { //he is taking location & history out of the props, normally it is props.location\n  /*const [name,setName] = useState('')\n  const [email,setEmail] = useState('')  //component level state right here, not application level state\n  const [password,setPassword] = useState('')\n  const [confirmpassword,setConfirmPassword] = useState('')\n  const [message,setMessage] = useState(null)*/\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const orderList = useSelector(state => state.orderList);\n  const {loading, error,orders } = orderList\n  console.log(orders)\n\n  /*const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin*/\n   \n  let vendorName =/*userInfo && userInfo.isMerchant ? userInfo.name :*/ ''\n\n  //THE LOGIC FOR CALCULATING THE TOTAL PRICE OF ITEMS THAT IS SPECIFIC TO EACH VENDOR\n  /*const addDecimals = (num) => { return(Math.round(num*100)/100).toFixed(2) }\n      \n    cart.itemsPrice = addDecimals(cart.cartItems.reduce((acc, item)=>acc +item.price*item.qty,0))*/\n\n   \n\n  useEffect( () => {\n  /*if(userInfo){*/\n  dispatch(listOrders()) /*console.log('orders nigga')*/\n  /*}else{\n   history.push('/login')\n  }*/\n    }\n  ,[dispatch,history]) //successDelete was passed into useEffect because youu want the list of users to reload, showing the effective delete\n\n\n    return (\n       <>\n        <h1>Previous Tickets</h1>\n        {/*PUT THE LIST IN A ROW WITH TWO COLUMNS AND PUT BUTTONS IN THE OTHER COLUMN AND MAKE IT 3 TIMES SMALLER THAN THE ORDER/PARKLOG LIST*/}\n         <p>Please Select the time period in  which you would like to know which trucks were in the park </p>\n        \n        {loading ? <Loader/>:error ? <Message variant='danger'>{error}</Message>:(\n\n        <Table striped border hover responsive className ='table-sm'>\n         <thead>\n          <tr>\n           <th>BOOKING NUMBER</th>\n           <th>TRUCK NUMBER</th>\n           <th>CONTAINER NUMBER</th>\n           <th>TRUCK CATEGORY</th>\n           <th>ENTRY DATE</th>\n           <th>ENTRY TIME</th>\n           <th>EXIT DATE</th>\n           <th>EXIT TIME</th>\n           {/*userInfo.isAdmin ?(<th>TOTAL</th>):(<th>TO RECEIVE:</th> )}{/*AS PER TOTAL PRICE*/}\n           {/*<th>PAID</th>*/}\n           \n          \n         </tr>\n         </thead>\n         <tbody>\n          {orders.map(order => ( \n            <tr key={order._id} >\n              <td>{order.bookingNumber}</td>\n              <td>{order.truckNumber}</td>\n              <td>{order.containerNumber}</td>\n              <td>{order.truckCategory}</td>\n              <td>{order.entryDate}</td>\n              <td>{order.entryTime}</td>\n              <td>{order.exitDate}</td>\n              <td>{order.exitTime}</td>\n              \n              \n\n              {/*<td>{order.isPaid ? (order.paidAt.substring(0,10)): there used to be curly braces around order.paidAt \n                (<i className='fas fa-times' style={{color:'red'}}></i>)}\n              </td>*/}\n\n              \n\n              <td>\n               <LinkContainer to={`/parklog/${order._id}`}>\n                <Button variant='light' className='btn-sm'>\n                   Details\n                </Button>\n               </LinkContainer>\n\n              </td>\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n        )}\n\n\n\n\n\n       </>\n\n    )\n\n}\n\nexport default OrderListScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/CommunicationScreen.js",["286"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {clientSaid} from '../actions/userActions.js'\n/*import {bossSaid} from '../actions/userActions.js'*/\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst CommunicationScreen = ({location, history}) => { //he is taking location & history out of the props, normally it is props.location\n  const [clientMessage,setClientMessage] = useState('')  //component level state right here, not application level state\n  \n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n  const userLogin = useSelector(state => state.userLogin);\n  const {loading, error,userInfo } = userLogin\n  \n  const clientId = userInfo._id /*at least i think it's this -youre right, it is this */\n  const clientName = userInfo.name\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n  })\n\n\n  useEffect( () => {\n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n     \n  },[/*redirect,history,userInfo*/])\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          setClientMessage('')\n          window.alert('Message Sent!')\n        //dispatch(/*login(email,password)*/)\n         dispatch(clientSaid(clientMessage, clientId ,clientName))\n  }\n\n    return (\n       <FormContainer>\n        <h1>Send A Message ...</h1>\n        {error && <Message variant='danger'>{error}</Message>}\n        {loading && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Customer Service: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={userInfo.adminMessage} defaultValue={`Good day user ${userInfo.name},how may we help you?`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={clientMessage} onChange={(e)=>{setClientMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        <br/>\n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           Want to communicate in another way? send us a message at: <a href={`mailto:customerservice@bridgeway.com?subject=Correspondence from `}> customerservice@bridgeway.com  </a>\n         </Col>  \n                      \n        </Row>  \n   \n        <Row>\n         <Col>\n         Alternatively, call us at: <strong> 08183763331</strong>  \n         </Col>  \n        </Row>          \n\n       </FormContainer>\n\n    )\n\n}\n\nexport default CommunicationScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/UserEditScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/AdminComScreen.js",["287","288","289"],"import React, {useState ,useEffect} from 'react'\n/*import {Link} from 'react-router-dom'*/\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport {adminSaid,getUserDetails} from '../actions/userActions.js'\nimport FormContainer from '../components/FormContainer.js'\n\n\n\n\n\nconst AdminComScreen = ({location, match,history}) => { //he is taking location & history out of the props, normally it is props.location\n  const userId = match.params.id\n  const [bossMessage,setBossMessage] = useState('')  \n  \n  const dispatch = useDispatch() \n  const userLogin = useSelector(state => state.userLogin);\n  const {loading,error,userInfo} = userLogin /*if youre having problems reaching this  screen, come and delete this line, and the userInfo useEffect */\n\n  /*the genius thing i'm going to do here is collect\n   information for a particular user,not using userlogin i guess,\n   but where to collect userInfo of a particular user that was clicked,\n    i need to create a new global state for this cuz i need to fetch info\n  from backend based on the user id i will send  - FIND THIS IN USER DETAILS- userDetails*/\n  \n  const userDetails = useSelector((state) => state.userDetails);\n  const {loading:loadingDetails, error:errorDetails,user } = userDetails\n     console.log(userDetails)\n\n      /*consider renaming these from clientId, clientEmail,clientName , cuz youre updating adminMessage even though it's in the client's data */\n     const clientId = user._id\n     const clientEmail = user.email\n     const clientName = user.name\n\n  /* const {loading, error,userInfo } = userLogin */\n   /*at least i think it's this -youre right, it is this */\n\n  const redirect = location.search ? location.search.split('=')[1]:'/'\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\n\n\n  useEffect(()=>{  \n    if(!userInfo){\n    history.push(`/login`)\n    }\n  })\n\n\n  useEffect( () => {\n      \n    dispatch(getUserDetails(userId))\n   \n    /*if(userInfo){ \n       history.push(redirect)\n    } I WANT TO PUT IN THE CUSTOMER SERVICE MESSAGE HERE,SO IT CAN REFRESH UPON CUSTOMER SENDING A MESSAGE*/\n      \n  },[dispatch, userId /*, clientEmail, clientName*/]) /*why client id an client name */\n\n\n\n  const submitHandler = (e) => {\n          e.preventDefault()\n          //this is where we want to to call our action to dispatch login\n          dispatch(adminSaid(bossMessage, clientId,clientEmail,clientName)) \n          window.alert('Message Sent!') \n          setBossMessage('')\n        \n         \n         /*yes we still need clientId \n         cuz that's how we'll know who we're going to update in the database*/\n  }\n\n    return (\n       <FormContainer>\n        <h1>Send A Message  ...</h1>\n        {errorDetails && <Message variant='danger'>{errorDetails}</Message>}\n        {loadingDetails && <Loader/>}\n        \n         <Form onSubmit={submitHandler}>\n\n             {/*okay so if the user is an admin, i want to show a name and email, otherwise\n    i want to to hide the name and email stuff, actually i changed my mind, admins\n     will have a different screen and a different route. CONSIDER CALLING GET USER PROFILE ROUTE\n     AFTER SENDING THE ID - FIND AN EXAMPLE OF THIS*/}\n\n        \n           <>\n        <Form.Group controlId='name'>\n\n            <Form.Label> Name: </Form.Label>\n            <Form.Control plaintext readOnly defaultValue ={user.name}></Form.Control>\n                {/* local state used to be here i don't wish to change the state here, for name and password, so maybe i will eliminate local state */}\n          </Form.Group>\n\n\n         <Form.Group controlId='email'>\n\n          <Form.Label>  Email Address: </Form.Label>\n          <Form.Control plaintext readOnly defaultValue={user.email}></Form.Control>\n        \n         </Form.Group> \n         </>\n\n         <Form.Group controlId='reply-message'>\n\n          <Form.Label> Client/Merchant Message: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} plaintext readOnly value={user.userMessage} defaultValue={`No message from client ${user.name} , ID - ${user._id}`}></Form.Control>\n\n         </Form.Group>\n         \n        \n\n\n          <Form.Group controlId='reply-message'>\n\n          <Form.Label>  Send Your Message Below: </Form.Label>\n          <Form.Control as =\"textarea\" rows={6} placeholder='type message here' value={bossMessage} onChange={(e)=>{setBossMessage(e.target.value)}}></Form.Control>\n\n         </Form.Group>\n\n         \n         <Button type='submit' variant='primary'>Send</Button>\n         \n\n        </Form>\n       \n        \n        \n        <br/>\n        <Row className='py-3'>\n         <Col>                       \n           You can also message Clients/Merchants using: customerservice@bridgeway.com \n         </Col>  \n         </Row>\n\n         <Row className='py-3'>\n         <Col>                       \n           Remember to copy and send the Client/Merchant Message into the email body, and use an appropriate subject, for easy follow up from clients\n         </Col>                     \n        </Row>              \n\n       </FormContainer>\n\n    )\n\n}\n\nexport default AdminComScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/UserListScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/ProductListScreen.js",["290"],"import React, { useEffect } from 'react'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport {Table,Button,Row,Col} from 'react-bootstrap'\nimport {useDispatch, useSelector} from 'react-redux'\nimport Message from '../components/Message.js'\nimport Loader from '../components/Message.js'\nimport Paginate from '../components/Paginate.js'\nimport {deleteProduct,listProducts,createProduct} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_RESET } from '../constants/productConstants.js'\n\n\n\n\nconst ProductListScreen =({history, match}) => { //he is taking location & history out of the props, normally it is props.location\n  const pageNumber = match.params.pageNumber || 1\n  const dispatch = useDispatch() //dont forget that real dispatches only take place in action creators, you are only calling useDispatch here\n\n  const productList = useSelector(state => state.productList);\n  const {loading, error,products,page,pages} = productList\n\n  const productCreate = useSelector(state => state.productCreate);\n  const { loading:loadingCreate, error:errorCreate,success:successCreate , product:createdProduct} = productCreate\n\n  const productDelete = useSelector(state => state.productDelete);\n  const { loading:loadingDelete, error:errorDelete,success:successDelete } = productDelete\n\n  const userLogin = useSelector(state => state.userLogin);\n  const {userInfo } = userLogin\n\n  /* const keyword = ''just in case you need an empty string in listProducts */\n\n  let vendorName = userInfo.isMerchant ? userInfo.name :''\n\n\n\n//location .search has the url query string, study it a bit\n\n//because we dont want to able to come into the login screen ONCE WE ARE ALREADY LOGGED IN, effect this in the useEffect below\n\nuseEffect(()=> {\n  if(!userInfo){\n    \n    history.push('/login')\n    \n  }\n \n  },[ userInfo,history,dispatch,successCreate])\n\n\n\n  /*useEffect(()=> {\n    if(userInfo.isMerchant){\n      vendorName = userInfo.name\n    }\n    else if(userInfo.isAdmin){\n      \n      vendorName = /(.*)/\n    }\n\n    },[userInfo])*/\n\n\n\n\n  useEffect( () => {\n    dispatch({type: PRODUCT_CREATE_RESET })\n  if(userInfo.isAdmin === false && userInfo.isMerchant === false){\n  history.push('/login')\n\n  }\n\n  if(successCreate){\n   history.push(`/admin/product/${createdProduct._id}/edit`)\n }else{\n   dispatch(listProducts(' ',pageNumber,vendorName))\n }\n\n\n    }\n  ,[dispatch,history,userInfo, successDelete,successCreate,createdProduct,pageNumber]) //successDelete was passed into useEffect because youu want the list of users to reload, showing the effective delete\n\n\n\n const deleteHandler = (id) => {\nif(window.confirm('Are you sure you want to delete this item ?')){ //window.confirm is good practice for if you want to delete items\n  dispatch(deleteProduct(id))\n}\n\n  }\n\n  const createProductHandler = () => {\n    dispatch(createProduct())\n    }\n\n    return (\n       <>\n        <Row className='align-items-center'>\n         <Col>\n          <h1>Products</h1>\n         </Col>\n         <Col className=\"text-right\">\n          {userInfo.isMerchant  && (<Button className='my-3' onClick={createProductHandler}>\n            <i className='fas fa-plus'></i> Create Product\n          </Button>)}\n         </Col>\n        </Row>\n        {loadingDelete && <Loader/> }\n        {errorDelete &&<Message variant='danger'>{errorDelete}</Message> }\n\n        {loadingCreate && <Loader/> }\n        {errorCreate &&<Message variant='danger'>{errorCreate}</Message> }\n\n        {loading ? <Loader/>:error ? <Message variant='danger'>{error}</Message>:(\n         <>\n        <Table striped bordered hover responsive className ='table-sm'>\n         <thead>\n          <tr>\n           <th>ID</th>\n           <th>NAME</th>\n           <th>PRICE</th>\n           <th>CATEGORY</th>\n           {userInfo.isAdmin && <th>VENDOR</th>}\n           <th></th>\n         </tr>\n         </thead>\n         <tbody>\n          {products.map(product => (\n            <tr key={product._id}>\n              <td>{product._id}</td>\n              <td>{product.name}</td>\n              <td>₦ {product.price}</td>\n              <td>{product.category}</td>\n              {userInfo.isAdmin && <td>{product.vendor}</td>}\n              {userInfo.isMerchant && (<td>\n               <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                <Button variant='light' className='btn-sm'>\n                   <i className='fas fa-edit'></i> Edit\n                </Button>\n               </LinkContainer>\n               <Button variant='danger' className='btn-sm' onClick={()=>deleteHandler(product._id)}>\n                 <i className='fas fa-trash'></i> Delete\n               </Button>\n              </td>)}\n            </tr>\n          ))}\n         </tbody>\n        </Table>\n\n         <Paginate pages={pages} page={page} isAdmin={true}/>\n        </>\n        )}\n\n\n\n\n\n       </>\n\n    )\n\n}\n\nexport default ProductListScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/ProductEditScreen.js",[],"/home/dagogo/Desktop/car-park/frontend/src/constants/productConstants.js",[],"/home/dagogo/Desktop/car-park/frontend/src/constants/cartConstants.js",[],"/home/dagogo/Desktop/car-park/frontend/src/constants/UserConstants.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/SearchBox.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/Message.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/FormContainer.js",[],"/home/dagogo/Desktop/car-park/frontend/src/constants/orderConstants.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/Loader.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/Paginate.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/CheckoutSteps.js",[],"/home/dagogo/Desktop/car-park/frontend/src/actions/orderActions.js",["291"],"import {ORDER_CREATE_REQUEST,\n        ORDER_CREATE_SUCCESS,\n        ORDER_CREATE_FAILURE,\n        ORDER_DETAILS_REQUEST,\n        ORDER_DETAILS_SUCCESS,\n        ORDER_DETAILS_FAILURE,\n        ORDER_PAY_REQUEST,\n        ORDER_PAY_SUCCESS,\n        ORDER_PAY_FAILURE,\n        ORDER_APPROVE_REQUEST,\n        ORDER_APPROVE_SUCCESS,\n        ORDER_APPROVE_FAILURE,\n        //ORDER_PAY_RESET,\n        UPDATE_RECORDS_REQUEST,\n        UPDATE_RECORDS_SUCCESS,\n        UPDATE_RECORDS_FAILURE,\n        ORDER_LIST_MY_REQUEST,\n        ORDER_LIST_MY_SUCCESS,\n        ORDER_LIST_MY_FAILURE,\n        ORDER_LIST_REQUEST,\n        ORDER_LIST_SUCCESS,\n        ORDER_LIST_FAILURE,\n        ORDER_DELIVER_REQUEST,\n        ORDER_DELIVER_SUCCESS,\n        ORDER_DELIVER_FAILURE\n        //ORDER_DELIVER_RESET,\n       } from '../constants/orderConstants'\nimport axios from 'axios'\n                              /*the entire order object*/\nexport const createOrder  = (order) => async (dispatch,getState)=> {\n   //redux thunk was used just now in the form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_CREATE_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.post(`/api/orders`,order,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_CREATE_SUCCESS,\n              payload:data })\n\n  }\n   catch(error){\n     dispatch({type:ORDER_CREATE_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\nexport const sendRecords  = (trailer) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: UPDATE_RECORDS_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.post(`/api/orders/update`,trailer,config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: UPDATE_RECORDS_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:UPDATE_RECORDS_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}\n\n\nexport const getOrderDetails  = (id) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_DETAILS_REQUEST})\n\n     /*const {userLogin:{userInfo}} = getState()*/\n    //we do config cus we wanna send the headers a content type of application/json\n    /*const config = {\n      headers:{\n        //'Content-Type':'application/json' |you dont really need content type in GET requests for some reason\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }*/\n    const {data} = await axios.get(`/api/orders/${id}`/*,config*/)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_DETAILS_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n    })\n\n  }\n   catch(error){\n     dispatch({type:ORDER_DETAILS_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\n\nexport const payOrder  = (orderId,paymentResult) => async (dispatch,getState) =>{\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_PAY_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        'Content-Type':'application/json',\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/orders/${orderId}/pay`,paymentResult,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_PAY_SUCCESS,\n              payload:data\n            })/*this data variable is file specific\nexport const getOrderDetails  = (id/*this is not the entire object, just an order id*/\n\n\n  }\n   catch(error){\n     dispatch({type:ORDER_PAY_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const deliverOrder  = (order) => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_DELIVER_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }\n    const {data} = await axios.put(`/api/orders/${order._id}/deliver`,{},config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_DELIVER_SUCCESS,\n              payload:data\n            })/*this data variable is file specific*/\n\n\n\n  }\n   catch(error){\n     dispatch({type:ORDER_DELIVER_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const listMyOrders  = () => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_LIST_MY_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    } \n    const {data} = await axios.get(`/api/orders/myorders`,config)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_LIST_MY_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n\n\n    })\n  }\n   catch(error){\n     dispatch({type:ORDER_LIST_MY_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const listOrders  = () => async (dispatch,getState)=> {\n//form of async (dispatch) above\n  try {\n    dispatch({type: ORDER_LIST_REQUEST})\n\n     const {userLogin:{userInfo}} = getState()\n    //we do config cus we wanna send he headers a content type of application/json\n    /*const config = {\n      headers:{\n\n        Authorization:`Bearer ${userInfo.token}`\n      }\n    }*/\n    const {data} = await axios.get(`/api/orders?vendorName=${''}`/*,config*/)\n    //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n    dispatch({\n              type: ORDER_LIST_SUCCESS,\n              payload:data /*this data variable is file specific*/\n\n\n\n    })\n  }\n   catch(error){\n     dispatch({type:ORDER_LIST_FAILURE,\n               payload: error.response && error.response.data.message?\n                error.response.data.message:error.message })\n   }\n}\n\n\nexport const merchantApproveOrder  = (orderId,productId,updatedQty) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: ORDER_APPROVE_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.put(`/api/orders`,{orderId,productId,updatedQty},config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: ORDER_APPROVE_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:ORDER_APPROVE_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}\n\n\nexport const merchantLockOrder  = (order) => async (dispatch,getState)=> {\n  //redux thunk was used just now in the form of async (dispatch) above\n try {\n   dispatch({type: ORDER_CREATE_REQUEST})\n\n    const {userLogin:{userInfo}} = getState()\n   //we do config cus we wanna send he headers a content type of application/json\n   const config = {\n     headers:{\n       'Content-Type':'application/json',\n       Authorization:`Bearer ${userInfo.token}`\n     }\n   }\n   const {data} = await axios.post(`/api/orders`,order,config)\n   //i'm gonna take a stab here and say that the third argument for axios is for setting header property\n\n   dispatch({\n             type: ORDER_CREATE_SUCCESS,\n             payload:data })\n\n }\n  catch(error){\n    dispatch({type:ORDER_CREATE_FAILURE,\n              payload: error.response && error.response.data.message?\n               error.response.data.message:error.message })\n  }\n}","/home/dagogo/Desktop/car-park/frontend/src/actions/productActions.js",[],"/home/dagogo/Desktop/car-park/frontend/src/actions/userActions.js",[],"/home/dagogo/Desktop/car-park/frontend/src/actions/cartActions.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/productComponent.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/ProductCarousel.js",[],["292","293"],"/home/dagogo/Desktop/car-park/frontend/src/components/Meta.js",[],"/home/dagogo/Desktop/car-park/frontend/src/components/Rating.js",[],"/home/dagogo/Desktop/car-park/frontend/src/screens/PrintingScreen.js",["294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320"],"import React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport invalidTicket from '../components/invalid.jpeg'\nimport exportImage from '../components/EXPORT.jpeg'\nimport flatbedENLImage from '../components/flatbedENL.png'\nimport flatbedAPMTImage from '../components/flatbedAPMT.jpeg'\nimport barcode from '../components/barcode.jpeg'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../actions/userActions.js'\nimport {listProductDetails,createProductReview} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'\nimport {register} from '../actions/userActions.js'\nimport {createOrder} from '../actions/orderActions.js'\n\nconst PrintingScreen = ({history,match}) => {\n      /*cuz we need a single product from the array of products,and we gotta do it PER PAGE, we use.find method\n      TO FILTER IT OUT FROM THE ARRAY*/\n   const [qty ,setQty] = useState('')\n   const [rating ,setRating] = useState(0)\n   const [comment ,setComment] = useState('')\n   const [buttonVis ,setButtonVis] = useState(true)\n   const [allowPrint, setAllowPrint] = useState(true)\n  const dispatch = useDispatch()\n  \n  const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails\n\n  const productCreateReview = useSelector(state => state.productCreateReview)\n  const {success:successProductReview, error:errorProductReview} = productCreateReview\n  \n  const orderCreate = useSelector(state => state.orderCreate)\n  const {order,loading:loadingorder,error:errororder} = orderCreate\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n   /*const userInfo = userInfoArray[0]*/\n\n   let printPermission = true\n   useEffect(()=>{\n    dispatch(listProductDetails())\n    dispatch(login())\n     if(order && order.instruction === 'Do not allow further printing'){\n       setAllowPrint(false)\n       printPermission = false\n     }\n   },[dispatch])\n\n /*console.log(`${showTime()}`)*/\n console.log(product)\n\nconst updateAndPrintHandler = () => {\n  /*dispatch(register(zoneArea,zoneCounter,change))*/\n  dispatch(createOrder({\n    bookingNumber:userInfo.bookingNumber,\n    truckCategory:userInfo.truckCategory,\n    containerNumber:userInfo.containerNumber,\n    truckNumber:userInfo.truckNumber,\n    entryTime:`${showTime()}`,\n    entryDate:`${date.toLocaleDateString()}`,\n    parkZone:zoneArea,\n    tagNumber:zoneCounter\n    \n  }))\n  window.print()\n  window.location.reload()\n}\n  \n\n\n\nconst previousPageHandler = () => {\n  \n  window.history.back()\n}\n\n\n\n\n \n  let date = new Date()\n\n  function showTime(){\n    let time = new Date()\n    let hour = time.getHours();\n    let min = time.getMinutes();\n    let sec = time.getSeconds();\n    let am_pm=\"AM\"\n\n    if(hour>12){\n      hour -= 12;\n      am_pm=\"PM\"\n    }\n\n    if(hour==0){\n      hour = 12;\n      am_pm=\"AM\"\n    }\n     hour = hour < 10 ? \"0\" + hour :hour;\n     min = min < 10 ? \"0\" + min :min;\n     sec = sec < 10 ? \"0\" + sec :sec;\n\n     let currentTime = hour +\":\" + min + \" \" + am_pm\n     return currentTime\n  }\n  \n  const change = 1\n  let zoneArea\n  let zoneCounter\n  let freeSpace  \n\n  /*in the code below, you gotta MAKE parkedTrucks.filter((e)=>{e !=={}}).length  INTO A SIMPLE VARIABLE */\n /*for(let i = 0 ; i < product.length; i++){\n   let occupiedCalculator =function(){return product[i].parkedTrucks.filter((e)=>{e !=={}}).length}\n    product[i].number = occupiedCalculator()\n     console.log(product[i].number)\n }*/\n\n\n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].occupiedSpaces < 52 ){ zoneArea = 'F'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].occupiedSpaces === 52 && product[6].occupiedSpaces < 50 ){zoneArea = 'G'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].occupiedSpaces === 50 && product[7].occupiedSpaces < 51 ){zoneArea = 'H'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].occupiedSpaces === 51 && product[8].occupiedSpaces < 95 ){zoneArea = 'R'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].occupiedSpaces === 52 && product[6].occupiedSpaces === 50 && product[7].occupiedSpaces === 51 && product[8].occupiedSpaces === 95 ){zoneArea = 'X'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].occupiedSpaces < 37 ){zoneArea = 'A'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].occupiedSpaces === 37 && product[1].occupiedSpaces < 46 ){zoneArea = 'B'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product && product[0].occupiedSpaces === 37 && product[1].occupiedSpaces === 46 ){zoneArea = 'X'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].occupiedSpaces < 78 ){zoneArea = 'C'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].occupiedSpaces === 78 && product[3].occupiedSpaces < 30 ){zoneArea = 'D'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].occupiedSpaces === 30 && product[4].occupiedSpaces < 71 ){zoneArea = 'E' }\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product && product[2].occupiedSpaces === 78 && product[3].occupiedSpaces === 30 && product[4].occupiedSpaces === 71){zoneArea = 'X'}\n  else{ zoneArea ='--'}\n\n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].occupiedSpaces < 52 ){  zoneCounter = product[5].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].occupiedSpaces === 52 && product[6].occupiedSpaces < 50 ){ zoneCounter =product[6].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].occupiedSpaces === 50 && product[7].occupiedSpaces < 51 ){ zoneCounter =product[7].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].occupiedSpaces === 51 && product[8].occupiedSpaces < 95 ){ zoneCounter =product[8].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].occupiedSpaces === 52 && product[6].occupiedSpaces === 50 && product[7].occupiedSpaces === 51 && product[8].occupiedSpaces === 95 ){zoneCounter= freeSpace = 0}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].occupiedSpaces < 37 ){ zoneCounter =product[0].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].occupiedSpaces === 37 && product[1].occupiedSpaces < 46 ){ zoneCounter =product[1].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product && product[0].occupiedSpaces === 37 && product[1].occupiedSpaces === 46 ){zoneCounter= freeSpace = 0}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].occupiedSpaces < 78 ){ zoneCounter =product[2].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].occupiedSpaces === 78 && product[3].occupiedSpaces < 30 ){ zoneCounter =product[3].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].occupiedSpaces === 30 && product[4].occupiedSpaces < 71 ){ zoneCounter =product[4].currentFreeSpace}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product && product[2].occupiedSpaces === 78 && product[3].occupiedSpaces === 30 && product[4].occupiedSpaces === 71){zoneCounter= freeSpace = 0}\n  else{zoneCounter = 0 }\n\n\n  /*console.log(zoneArea,zoneCounter)*/\n\n      return(\n        <>\n        \n        {(\n          <>\n          <Meta title={\"FLACS PARKING SYSTEM\"}/>\n          {freeSpace===0 &&<center className='messageSpacing'> <p className='driversEntryPermit ' >ALL PARKING SLOTS FOR {userInfo.truckCategory} ARE OCCUPIED, PLEASE WAIT UNTIL SOMEONE LEAVES. </p></center>}\n          \n          <Row className= \"ticketBorder\" >\n            <Col>\n          <Row><p className='apapa'>LILYPOND</p></Row> \n          \n          <Row className =\"ticketIntro\">\n          <p className='driversEntryPermit'>DRIVERS ENTRY PERMIT</p>\n            </Row>\n\n            <Row className=\"ticketIntro\">\n\n            <Col>\n            <Row>\n           <Image className=\"truckImage\" src={userInfo && userInfo.truckCategory === \"FLAT BED APMT\"?flatbedAPMTImage:(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\"?flatbedENLImage:(userInfo && userInfo.truckCategory === \"EXPORT\"?exportImage:(invalidTicket)))} alt={\"truck image\"} fluid>\n           </Image>\n           </Row>\n            </Col> \n            \n            <Col>\n            <p className=\"centreAttempt\">TRUCK CATEGORY:</p><p className=\"centreAttempt slightlyLesserAppFont\">{userInfo?userInfo.truckCategory:'N/A'}</p> \n            </Col> \n            </Row>\n            </Col>\n          \n          \n         \n            \n           <Row>\n           <Col md={6}>\n             \n            <Row className= \"numberBorder\">\n              <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              <Row>\n                   <Col className=\"slightlyLesserAppFont\"> PARK ZONE</Col>\n                   \n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <center>\n                <p className=\"bigNumber\" >\n                 {zoneArea}\n                 </p>\n                 </center>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row>\n                   <Col className=\"slightlyBiggerAppFont\">No</Col>\n                   <Col>\n                    <strong className=\"mildlyBiggerAppFont\"> {zoneCounter} </strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               </ListGroup >\n                \n                \n                \n                \n                {\n                /*<Row><h1> TAG NO</h1></Row>\n                <Row className=\"bigNumber\" > {'tagCounter'}</Row>\n                <Row>PARK ZONE</Row>\n                <Row>{'zoneCounter'}</Row>*/}\n              </Card>\n            </Row>\n           </Col>\n           \n            <Col md={6}>\n             <Card>\n              <ListGroup variant='flush'  className='borderless'>\n              <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>BOOKING NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{userInfo?userInfo.bookingNumber:'N/A'}</h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n              \n              \n              <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>TRUCK NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{userInfo?userInfo.truckNumber:'N/A'}</h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>CONTAINER NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{userInfo?userInfo.containerNumber:'N/A'} </h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n\n               <ListGroup.Item className='borderless centerAttempt entryHeader'>\n                 <Row className=\"headerFont \">\n                   <Col >ENTRY DETAILS</Col> \n                   \n                 </Row>\n               </ListGroup.Item>\n\n\n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col> TIME:</Col>\n                   <Col>\n                    <strong className=\"appFont\">{freeSpace=== 0 ?'--':showTime()}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col> DATE:</Col>\n                   <Col>\n                    \n                     <strong className=\"appFont\">{freeSpace=== 0 ?'--': date.toLocaleDateString()}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n             {/*product.countInStock > 0 &&*/ (\n               <ListGroup.Item className='borderless centerAttempt'>\n                  <Row className=\"appFont\">\n                    \n                    \n                    <Image className=\"truckImage\" src={barcode} alt={\"truck image\"} fluid>\n           </Image>\n                    \n                  </Row>\n                </ListGroup.Item>\n             )}\n\n               <ListGroup.Item>\n                 \n               </ListGroup.Item>\n\n              </ListGroup>\n             </Card>\n            </Col>\n           \n           <Col className=\"displayNone\">\n            <Row>\n           <Image className=\"truckImage\" src={invalidTicket} alt={\"truck image\"} fluid>\n           </Image>\n           </Row>\n           \n           \n           </Col>\n           </Row>\n\n          </Row>\n             { /*freeSpace !== -1 ? <center>\n          <Button onClick={updateAndPrintHandler} className='btn-block printFont printButtonTop' type='button' >\n                 <i className='fas fa-print'></i> Print\n                 </Button>\n                 </center> :*/printPermission? \n                <center>\n                <Button onClick={updateAndPrintHandler} className='btn-block printFont printButtonTop' type='button' >\n                       <i className='fas fa-print'></i> Print\n                       </Button>\n                       </center> \n                 \n                 :' '}\n\n                 \n\n\n               {/* buttonVis &&   <center>\n                 <Link to={`/`}>\n          <Button  className='btn-block printFont printButton' type='button' >\n                 <i className='fas fa-home'></i> home screen\n                 </Button>\n                 </Link>\n               </center> */}\n          </>\n        )}\n      {order && <Message variant='danger'>{order.instruction}</Message>}\n        </>\n      )\n\n}\n\nexport default PrintingScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/TruckParkDetailsScreen.js",["321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337"],"\n\nimport React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport invalidTicket from '../components/invalid.jpeg'\nimport banStamp from '../components/donotuse1.jpeg'\nimport barcode from '../components/barcode.jpeg'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../actions/userActions.js'\nimport {listProductDetails,createProductReview} from '../actions/productActions.js'\nimport {getOrderDetails} from '../actions/orderActions.js'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'\nimport {register} from '../actions/userActions.js'\nimport {createOrder} from '../actions/orderActions.js'\n\nconst TruckParkDetailsScreen = ({history,match}) => {\n      /*cuz we need a single product from the array of products,and we gotta do it PER PAGE, we use.find method\n      TO FILTER IT OUT FROM THE ARRAY*/\n   const [qty ,setQty] = useState('')\n   const [rating ,setRating] = useState(0)\n   const [comment ,setComment] = useState('')\n   const [buttonVis ,setButtonVis] = useState(true)\n\n  const dispatch = useDispatch()\n  \n  /*const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails*/\n\n  /*const productCreateReview = useSelector(state => state.productCreateReview)\n  const {success:successProductReview, error:errorProductReview} = productCreateReview*/\n  \n\n /* const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin*/\n\n  const orderDetails = useSelector((state) => state.orderDetails )\n  const {order,loading,error} = orderDetails\n  \n useEffect(()=>{\n  \n  dispatch(getOrderDetails(match.params.id))\n   \n },[dispatch,match])\n\n\n\n/*const updateAndPrintHandler = () => {\n  dispatch(register(zoneArea,zoneCounter))\n  dispatch(createOrder({\n    bookingNumber:userInfo.bookingNumber,\n    truckCategory:userInfo.truckCategory,\n    containerNumber:userInfo.containerNumber,\n    truckNumber:userInfo.truckNumber,\n    entryTime:`${showTime()}`,\n    entryDate:`${date.toLocaleDateString()}`,\n    parkZone:zoneArea,\n    tagNumber:`${zoneCounter}`\n    \n  }))\n  window.print()\n}*/\n  \nconst previousPageHandler = () => {\n  \n  window.history.back()\n}\n\n\n\n \n \n  /*let date = new Date()*/\n\n  /*function showTime(){\n    let time = new Date()\n    let hour = time.getHours();\n    let min = time.getMinutes();\n    let sec = time.getSeconds();\n    let am_pm=\"AM\"\n\n    if(hour>12){\n      hour -= 12;\n      am_pm=\"PM\"\n    }\n\n    if(hour==0){\n      hour = 12;\n      am_pm=\"AM\"\n    }\n     hour = hour < 10 ? \"0\" + hour :hour;\n     min = min < 10 ? \"0\" + min :min;\n     sec = sec < 10 ? \"0\" + sec :sec;\n\n     let currentTime = hour +\":\" + min + \" \" + am_pm\n     return currentTime\n  }*/\n  \n  /*let zoneArea\n  let zoneCounter  \n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].number < 52 ){ zoneArea = 'F'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].number === 52 && product[6].number < 50 ){zoneArea = 'G'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].number === 50 && product[7].number < 51 ){zoneArea = 'H'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].number === 51 && product[8].number < 95 ){zoneArea = 'R'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number < 37 ){zoneArea = 'A'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number === 37 && product[1].number < 46 ){zoneArea = 'B'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number < 78 ){zoneArea = 'C'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number === 78 && product[3].number < 30 ){zoneArea = 'D'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].number === 30 && product[4].number < 71 ){zoneArea = 'E' }\n  else{ zoneArea ='--'}\n\n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].number < 52 ){  zoneCounter = product[5].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].number === 52 && product[6].number < 50 ){ zoneCounter =product[6].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].number === 50 && product[7].number < 51 ){ zoneCounter =product[7].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].number === 51 && product[8].number < 95 ){ zoneCounter =product[8].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number < 37 ){ zoneCounter =product[0].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number === 37 && product[1].number < 46 ){ zoneCounter =product[1].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number < 78 ){ zoneCounter =product[2].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number === 78 && product[3].number < 30 ){ zoneCounter =product[3].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].number === 30 && product[4].number < 71 ){ zoneCounter =product[4].number}\n  else{zoneCounter = 0 }*/\n\n\n\n\n      return(\n        <>\n       \n        {loading ? <Loader/>:error ?<Message variant='danger'>{error}</Message>:(\n          <>\n          <Meta title={`TICKET DETAILS FOR BOOKING N0:${order.bookingNumber}`}/>\n          <Row className= \"ticketBorder\" >\n            <Col>\n          <Row><p className='apapa'>LILYPOND</p></Row> \n          \n          <Row className =\"ticketIntro\">\n          <p className='driversEntryPermit'>NOT FOR USE AS A TICKET</p>\n            </Row>\n\n            <Row className=\"ticketIntro\">\n\n            <Col>\n            <Row>\n           <Image className=\"truckImage\" src={banStamp} alt={\"truck image\"} fluid>\n           </Image>\n           </Row>\n            </Col> \n            \n            <Col>\n            <p className=\"centreAttempt\">TRUCK CATEGORY:</p><p className=\"centreAttempt slightlyLesserAppFont\">{order.truckCategory}</p> \n            </Col> \n            </Row>\n            </Col>\n          \n          \n         \n            \n           <Row>\n           <Col md={6}>\n             \n            <Row className= \"numberBorder\">\n              <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              <Row>\n                   <Col className=\"slightlyLesserAppFont\"> PARK ZONE</Col>\n                   \n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <center>\n                <p className=\"bigNumber\" >\n                 {order.parkZone}\n                 </p>\n                 </center>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row>\n                   <Col className=\"slightlyBiggerAppFont\">No</Col>\n                   <Col>\n                    <strong className=\"mildlyBiggerAppFont\"> {order.tagNumber} </strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               </ListGroup >\n                \n                \n                \n                \n                {\n                /*<Row><h1> TAG NO</h1></Row>\n                <Row className=\"bigNumber\" > {'tagCounter'}</Row>\n                <Row>PARK ZONE</Row>\n                <Row>{'zoneCounter'}</Row>*/}\n              </Card>\n            </Row>\n           </Col>\n           \n            <Col md={6}>\n             <Card>\n              <ListGroup variant='flush'  className='borderless'>\n              <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>BOOKING NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{order.bookingNumber}</h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n              \n              \n              <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>TRUCK NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{order.truckNumber}</h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>CONTAINER NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{order.containerNumber} </h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n\n               <ListGroup.Item className='borderless centerAttempt entryHeader'>\n                 <Row className=\"headerFont \">\n                   <Col >ENTRY DETAILS</Col> \n                   \n                 </Row>\n               </ListGroup.Item>\n\n\n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col> TIME:</Col>\n                   <Col>\n                    <strong className=\"appFont\">{order.entryTime}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col> DATE:</Col>\n                   <Col>\n                    {/*<strong>{product.countInStock > 4 ?'In Stock':product.countInStock <= 3 ?'Few Left !!':product.countInStock === 0 ? 'Out of Stock':'Currently being restocked' //this currenty being restocked is not the right thing, you just put it there as filler, till the need comes to fix it }</strong>*/}\n                     <strong className=\"appFont\">{order.entryDate}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n             {/*product.countInStock > 0 &&*/ (\n               <ListGroup.Item className='borderless centerAttempt'>\n                  <Row className=\"appFont\">\n                    \n                    \n                    <Image className=\"truckImage\" src={barcode} alt={\"barcode\"} fluid>\n           </Image>\n                    \n                  </Row>\n                </ListGroup.Item>\n             )}\n\n               <ListGroup.Item>\n                 \n               </ListGroup.Item>\n\n              </ListGroup>\n             </Card>\n            </Col>\n           \n           <Col >\n            <Row>\n           <Image className=\"truckImage\" src={banStamp} alt={\"do not use stamp\"} fluid>\n           </Image>\n           </Row>\n           \n           \n           </Col>\n           </Row>\n\n          </Row>\n             { buttonVis && <center>\n          <Button onClick={previousPageHandler} className='btn-block printFont printButtonTop' type='button' >\n                 <i className='fas fa-arrow-left'></i> Go Back\n                 </Button>\n                 </center> }\n\n                 \n\n               {/* buttonVis &&   <center>\n                 <Link to={`/`}>\n          <Button  className='btn-block printFont printButton' type='button' >\n                 <i className='fas fa-home'></i> home screen\n                 </Button>\n                 </Link>\n               </center> */}\n          </>\n        )}\n\n        </>\n      )\n\n}\n\nexport default TruckParkDetailsScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/ExitScreen.js",["338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355"],"import React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport {login,createExitTicket} from '../actions/userActions.js'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {listProductDetails,createProductReview} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'\n\n\nconst ExitScreen = ({history,match}) => {\n      /*cuz we need a single product from the array of products,and we gotta do it PER PAGE, we use.find method\n      TO FILTER IT OUT FROM THE ARRAY*/\n   \n\n  const dispatch = useDispatch()\n  \n  const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails\n\n  const userExitDirection = useSelector(state => state.userExitDirection)\n  const {exitTicketInfo ,loading:loadingexit,error:errorexit} = userExitDirection\n  console.log(userExitDirection)\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n    \n  \n  const [email, setEmail] = useState({bookingNo:''})\n  const [bookingNo,setBookingNo] = useState('')\n/*const [truckNumber,setTruckNumber] = useState('')*/\n  let zoneCounter\n  let zoneArea\n  \n  console.log(email.bookingNo)\n  \n  \n useEffect(()=>{\n  dispatch(listProductDetails())\n    setBookingNo(email.bookingNo)\n\n  setEmail({...email,\n  truckNumber:userInfo?userInfo.truckNumber:'N/A',\n  containerNumber:userInfo?userInfo.containerNumber:'N/A',\n  entryTime:userInfo?showTime():'N/A',\n  entryDate:userInfo?date.toLocaleDateString():'N/A',\n  truckCategory:userInfo?userInfo.truckCategory:'N/A',\n})\n\n   \n  /*if(successProductReview){\n    alert(\"Thank you for your review!\")\n    setRating(0)\n    setComment('')\n    dispatch({type:PRODUCT_CREATE_REVIEW_RESET})\n  }*/\n\n   \n },[dispatch,userInfo])\n\n \n const createExitTicketHandler = (e) => {\n  \n  /*dispatch(login(bookingNo))*/\n   dispatch(createExitTicket({bookingNumber:email.bookingNo}))\n\n}\n\n\n\n\n/*const addToCartHandler = () => {\n  if(!userInfo){\n    window.alert('Please sign in to purchase')\n  }\n  else if(userInfo && (userInfo.isAdmin||userInfo.isMerchant)){\n    window.alert('Only customers may make purchases, please register as a customer')\n  }\n    else{history.push(`/cart/${match.params.id}?qty=${qty}`)} //there was a blank set of curly braces here, you just put quantity in \n}*/\n  \nconst previousPageHandler = () => {\n  \n  window.history.back()\n}\n\n \n\n \n \n  let date = new Date()\n\n  function showTime(){\n    let time = new Date()\n    let hour = time.getHours();\n    let min = time.getMinutes();\n    let sec = time.getSeconds();\n    let am_pm=\"AM\"\n\n    if(hour>12){\n      hour -= 12;\n      am_pm=\"PM\"\n    }\n\n    if(hour==0){\n      hour = 12;\n      am_pm=\"AM\"\n    }\n     hour = hour < 10 ? \"0\" + hour :hour;\n     min = min < 10 ? \"0\" + min :min;\n     sec = sec < 10 ? \"0\" + sec :sec;\n\n     let currentTime = hour +\":\" + min + \" \" + am_pm\n     return currentTime\n  }\n  \n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].number < 52 ){ zoneArea = 'F'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].number === 52 && product[6].number < 50 ){zoneArea = 'G'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].number === 50 && product[7].number < 51 ){zoneArea = 'H'}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].number === 51 && product[8].number < 95 ){zoneArea = 'R'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number < 37 ){zoneArea = 'A'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number === 37 && product[1].number < 46 ){zoneArea = 'B'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number < 78 ){zoneArea = 'C'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number === 78 && product[3].number < 30 ){zoneArea = 'D'}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].number === 30 && product[4].number < 71 ){zoneArea = 'E' }\n  else{ zoneArea ='-'}\n\n  if(userInfo && userInfo.truckCategory === \"EXPORT\" && product  && product[5].number < 52 ){  zoneCounter = product[5].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[5].number === 52 && product[6].number < 50 ){ zoneCounter =product[6].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[6].number === 50 && product[7].number < 51 ){ zoneCounter =product[7].number}\n  else if(userInfo && userInfo.truckCategory === 'EXPORT' && product && product[7].number === 51 && product[8].number < 95 ){ zoneCounter =product[8].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number < 37 ){ zoneCounter =product[0].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].number === 37 && product[1].number < 46 ){ zoneCounter =product[1].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number < 78 ){ zoneCounter =product[2].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].number === 78 && product[3].number < 30 ){ zoneCounter =product[3].number}\n  else if(userInfo && userInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].number === 30 && product[4].number < 71 ){ zoneCounter =product[4].number}\n  else{zoneCounter = 0 }\n\n/*const submitHandler =(e) =>{\n  e.preventDefault() //since submit handler is being called inside a form\n  dispatch(createProductReview(match.params.id,{\n    rating,\n    comment //both rating and comment are coming from local/comment state\n  }))\n}*/\n\n  \n\n      return(\n        <>\n        <center><p className='apapa'>LILYPOND</p></center>\n        <hr/>\n        <center><p className='greenBackground'><h2> EXIT SLIP GENERATOR (FOR DEMO ONLY)</h2></p></center>\n        <hr/>\n        <center><p className='warningInstruction'><h6>PLEASE NOTE:</h6> Do not use this page at the entrance facility, it is used for EXIT only. Select 'entrance' from the menu if you wish to process trucks entering the park.</p></center>\n        <hr/>\n        {/*loading ? <Loader/>:error ?<Message variant='danger'>{error}</Message>:*/(\n          <>\n          <Meta title={\"FLACS PARKING SYSTEM\"}/>\n          <Row >\n            <Row>\n              <center className=\"mb-4\" >\n          {/*exitTicketInfo && <h6>{exitTicketInfo.statusMessage}</h6>*/}\n            {/*exitTicketInfo && <h2>{exitTicketInfo.URL}</h2>*/}\n            {errorexit && <h2>{errorexit}</h2>}\n            </center>\n            </Row>\n           <Col md={5}>\n            \n            <Row>\n              <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              <Row>\n                   <Col className=\"appFont\">LEAVING FROM ZONE:</Col>\n                   \n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <center>\n                <p className=\"bigNumber\" >\n                {exitTicketInfo?exitTicketInfo.zone:'-'}\n                 \n                 </p>\n                 </center>\n               </ListGroup.Item>\n\n               {/*<ListGroup.Item>\n                 <Row>\n                   <Col className=\"appFont\">PARK ZONE:</Col>\n                   <Col>\n                    <strong className=\"appFont\"> {zoneArea}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>*/}\n\n               </ListGroup >\n                \n                \n                \n                \n                {\n                /*<Row><h1> TAG NO</h1></Row>\n                <Row className=\"bigNumber\" > {'tagCounter'}</Row>\n                <Row>PARK ZONE</Row>\n                <Row>{'zoneCounter'}</Row>*/}\n              </Card>\n            </Row>\n           </Col>\n           \n            <Col md={6}>\n             <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              {/*<Form onSubmit={submitHandler}>*/}\n                 <Row className=\"appFont\">\n                   <Col>BOOKING NUMBER:</Col>\n                   <Col>\n                   <Form.Control as='input' className='inputBorder' value={email.bookingNo} onChange={(e) =>{setEmail({bookingNo:e.target.value, truckNumber:'',containerNumber:'',entryTime:'',entryDate:'',truckCategory:''})}}   />\n                   </Col>\n                   <Col>\n                   <Button type='submit' variant='primary' onClick={createExitTicketHandler}>Generate</Button>\n                   </Col>\n                 </Row>\n                 {/*</Form>*/}\n               </ListGroup.Item>\n              \n              \n              \n              <ListGroup.Item>\n                 <Row >\n                   <Col className=\"appFont\">TICKET STATUS:</Col>\n                   <Col>\n                   {exitTicketInfo && exitTicketInfo.statusMessage}\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n               <ListGroup.Item>\n                 <Row >\n                   <Col className=\"appFont\">URL:</Col>\n                   <Col>\n                   {exitTicketInfo && exitTicketInfo.URL}\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               {/*<ListGroup.Item>\n                 <Row className=\"appFont\">\n                   <Col>EXIT TIME:</Col>\n                   <Col>\n                    <strong>{userInfo?email.entryTime:''}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>*/}\n\n               {/*<ListGroup.Item>\n                 <Row className=\"appFont\">\n                   <Col>EXIT DATE:</Col>\n                   <Col>\n                   \n                     <strong>{userInfo?email.entryDate:''}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>*/}\n             {/*\n               <ListGroup.Item>\n                  <Row className=\"appFont\">\n                    <Col>TRUCK CATEGORY:</Col>\n                    <Col>\n                    {email.truckCategory}\n                    </Col>\n                  </Row>\n                </ListGroup.Item>\n             */}\n                  {/*<Link to={`/exit/${bookingNo}`}></Link>*/}\n              {/* <ListGroup.Item>\n               \n                 <Button  className='btn-block printFont' type='button' >\n                 <i className='fas fa-print'></i> Generate PERMIT\n                 </Button>\n                 \n\n               </ListGroup.Item>*/}\n\n              </ListGroup>\n             </Card>\n            </Col>\n\n\n          </Row>\n          \n          {/*<Row>\n            <Col md={6}>\n              <h2>Reviews</h2>\n              {product.reviews.length === 0 && <Message>No Reviews </Message>}\n              <ListGroup variant=\"flush\">\n               {product.reviews.map(review =>( \n                 <ListGroup.Item key={review._id}>\n                  <strong>{review.name}</strong>\n                   <Rating value={review.rating} />\n                   <p>{review.createdAt.substring(0,10)}</p>\n                   <p>{review.comment}</p>\n                 </ListGroup.Item>\n               ) )}\n               <ListGroup.Item>\n                <h2>Write a Customer Review</h2>\n                {errorProductReview && <Message variant='danger'>{errorProductReview} </Message>}\n\n                {userInfo && (!userInfo.isAdmin || !userInfo.isMerchant)?(<Form onSubmit={submitHandler}>\n                <Form.Group controlId='rating'>\n                <Form.Label>Rating</Form.Label>\n                 <Form.Control as='select' value={rating} onChange={(e)=>setRating(e.target.value)}>\n\n                  <option value=''>Select...</option>\n                   <option value='1'>1-Poor</option>\n                   <option value='2'>2-Fair</option>\n                   <option value='3'>3-Good</option>\n                   <option value='4'>4-Very Good</option>\n                   <option value='5'>5-Excellent</option>\n\n                 </Form.Control>\n               </Form.Group>\n\n               <Form.Group controlId='comment'>\n                 <Form.Label>Comment</Form.Label>\n                 <Form.Control as='textarea' row='3' value={comment} onChange={(e)=>setComment(e.target.value)}>\n                 </Form.Control>\n               </Form.Group>\n\n              <Button type='submit' variant='primary'> Submit </Button>\n\n                </Form>):\n                  <Message> Please<Link to='/login'>sign in</Link> to write a review {' '} </Message>}\n               </ListGroup.Item>\n              </ListGroup>\n            </Col>\n                </Row> */}\n          </>\n        )}\n\n        </>\n      )\n\n}\n\nexport default ExitScreen\n","/home/dagogo/Desktop/car-park/frontend/src/screens/ExitPrintScreen.js",["356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385"],"import React ,{useState, useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Card, Button,Form} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport Meta from '../components/Meta'\nimport invalidTicket from '../components/invalid.jpeg'\nimport exportImage from '../components/EXPORT.jpeg'\nimport flatbedENLImage from '../components/flatbedENL.png'\nimport flatbedAPMTImage from '../components/flatbedAPMT.jpeg'\nimport barcode from '../components/barcode.jpeg'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login,driverDetails} from '../actions/userActions.js'\nimport {listProductDetails,createProductReview} from '../actions/productActions.js'\nimport {PRODUCT_CREATE_REVIEW_RESET} from '../constants/productConstants.js'\nimport {register} from '../actions/userActions.js'\nimport {createOrder, sendRecords} from '../actions/orderActions.js'\n\nconst PrintingScreen = ({history,match}) => {\n      /*cuz we need a single product from the array of products,and we gotta do it PER PAGE, we use.find method\n      TO FILTER IT OUT FROM THE ARRAY*/\n   const [qty ,setQty] = useState('')\n   const [rating ,setRating] = useState(0)\n   const [comment ,setComment] = useState('')\n   const [buttonVis ,setButtonVis] = useState(true)\n   const [allowPrint, setAllowPrint] = useState(true)\n\n  const dispatch = useDispatch()\n  \n  const productDetails = useSelector(state => state.productDetails)\n  const {product,loading, error} = productDetails\n\n  const updateRecords = useSelector(state => state.updateRecords)\n  const {order,loading:loadingRecords, error:errorRecords} = updateRecords\n  \n\n  const releaseDriver = useSelector(state => state.releaseDriver)\n  const {driverInfo} = releaseDriver\n  \n  console.log(driverInfo)\n useEffect(()=>{\n  /*dispatch(login())*/\n  dispatch(driverDetails()) \n  dispatch(listProductDetails())\n  \n   \n },[dispatch,match])\n\n\n\nconst updateAndPrintHandler = () => {\n /*dispatch(register(zoneArea,zoneCounter,change))*/\n  \n  dispatch(sendRecords({\n    bookingNumber:driverInfo.bookingNumber,\n    truckCategory:driverInfo.truckCategory,\n    containerNumber:driverInfo.containerNumber,\n    truckNumber:driverInfo.truckNumber,\n    entryTime:driverInfo.entryTime,\n    entryDate:driverInfo.entryDate,\n    exitTime:`${showTime()}`,\n    exitDate:`${date.toLocaleDateString()}`,\n    parkZone:driverInfo.parkZone,\n    tagNumber:driverInfo.tagNumber\n    \n  }))\n  window.print()\n  window.location.reload()\n}\n  \nconst previousPageHandler = () => {\n  \n  window.history.back()\n}\n\n\nconsole.log(driverInfo)\n\n \n  let date = new Date()\n\n  function showTime(){\n    let time = new Date()\n    let hour = time.getHours();\n    let min = time.getMinutes();\n    let sec = time.getSeconds();\n    let am_pm=\"AM\"\n\n    if(hour>12){\n      hour -= 12;\n      am_pm=\"PM\"\n    }\n\n    if(hour==0){\n      hour = 12;\n      am_pm=\"AM\"\n    }\n     hour = hour < 10 ? \"0\" + hour :hour;\n     min = min < 10 ? \"0\" + min :min;\n     sec = sec < 10 ? \"0\" + sec :sec;\n\n     let currentTime = hour +\":\" + min + \" \" + am_pm\n     return currentTime\n  }\n\n  \n\n\n\n  const change = -1\n  let zoneArea\n  let zoneCounter  \n  let occupiedSpace\n\n    /*in the code below, you gotta MAKE parkedTrucks.filter((e)=>{e !=={}}).length  INTO A SIMPLE VARIABLE */\n\n\n  /* if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[5].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[6].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[7].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[8].parkedTrucks.filter((e)=>{e !=={}}).length === 0 ){zoneArea = 'X'}\n  else if(driverInfo && driverInfo.truckCategory === \"EXPORT\" && product  && product[5].parkedTrucks.filter((e)=>{e !=={}}).length < 52 ){ zoneArea = 'F'}\n  else if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[5].parkedTrucks.filter((e)=>{e !=={}}).length === 52 && product[6].parkedTrucks.filter((e)=>{e !=={}}).length < 50 ){zoneArea = 'G'}\n  else if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[6].parkedTrucks.filter((e)=>{e !=={}}).length === 50 && product[7].parkedTrucks.filter((e)=>{e !=={}}).length < 51 ){zoneArea = 'H'}\n  else if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[7].parkedTrucks.filter((e)=>{e !=={}}).length === 51 && product[8].parkedTrucks.filter((e)=>{e !=={}}).length < 95 ){zoneArea = 'R'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\" && product && product[0].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[1].parkedTrucks.filter((e)=>{e !=={}}).length === 0 ){zoneArea = 'X'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].parkedTrucks.filter((e)=>{e !=={}}).length < 37 ){zoneArea = 'A'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].parkedTrucks.filter((e)=>{e !=={}}).length === 37 && product[1].parkedTrucks.filter((e)=>{e !=={}}).length < 46 ){zoneArea = 'B'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product && product[2].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[3].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[4].parkedTrucks.filter((e)=>{e !=={}}).length === 0){zoneArea = 'X'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].parkedTrucks.filter((e)=>{e !=={}}).length < 78 ){zoneArea = 'C'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].parkedTrucks.filter((e)=>{e !=={}}).length === 78 && product[3].parkedTrucks.filter((e)=>{e !=={}}).length < 30 ){zoneArea = 'D'}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].parkedTrucks.filter((e)=>{e !=={}}).length === 30 && product[4].parkedTrucks.filter((e)=>{e !=={}}).length < 71 ){zoneArea = 'E' }\n  else{ zoneArea ='-'}\n\n  if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[5].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[6].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[7].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[8].parkedTrucks.filter((e)=>{e !=={}}).length === 0 ){zoneCounter = occupiedSpace  = -1}\n  if(driverInfo && driverInfo.truckCategory === \"EXPORT\" && product  && product[5].parkedTrucks.filter((e)=>{e !=={}}).length < 52 ){  zoneCounter = product[5].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[5].parkedTrucks.filter((e)=>{e !=={}}).length === 52 && product[6].parkedTrucks.filter((e)=>{e !=={}}).length < 50 ){ zoneCounter =product[6].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[6].parkedTrucks.filter((e)=>{e !=={}}).length === 50 && product[7].parkedTrucks.filter((e)=>{e !=={}}).length < 51 ){ zoneCounter =product[7].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else if(driverInfo && driverInfo.truckCategory === 'EXPORT' && product && product[7].parkedTrucks.filter((e)=>{e !=={}}).length === 51 && product[8].parkedTrucks.filter((e)=>{e !=={}}).length < 95 ){ zoneCounter =product[8].parkedTrucks.filter((e)=>{e !=={}}).length}\n  \n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\" && product && product[0].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[1].parkedTrucks.filter((e)=>{e !=={}}).length === 0 ){zoneCounter= occupiedSpace = -1}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].parkedTrucks.filter((e)=>{e !=={}}).length < 37 ){ zoneCounter =product[0].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\" && product  && product[0].parkedTrucks.filter((e)=>{e !=={}}).length === 37 && product[1].parkedTrucks.filter((e)=>{e !=={}}).length < 46 ){ zoneCounter =product[1].parkedTrucks.filter((e)=>{e !=={}}).length}\n  \n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product && product[2].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[3].parkedTrucks.filter((e)=>{e !=={}}).length === 0 && product[4].parkedTrucks.filter((e)=>{e !=={}}).length === 0){zoneCounter= occupiedSpace = -1}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].parkedTrucks.filter((e)=>{e !=={}}).length < 78 ){ zoneCounter =product[2].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product  && product[2].parkedTrucks.filter((e)=>{e !=={}}).length === 78 && product[3].parkedTrucks.filter((e)=>{e !=={}}).length < 30 ){ zoneCounter =product[3].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else if(driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\" && product  && product[3].parkedTrucks.filter((e)=>{e !=={}}).length === 30 && product[4].parkedTrucks.filter((e)=>{e !=={}}).length < 71 ){ zoneCounter =product[4].parkedTrucks.filter((e)=>{e !=={}}).length}\n  else{zoneCounter = 0 }*/\n\n\n\n      return(\n        <>\n       \n        \n          <>\n          <Meta title={\"FLACS PARKING SYSTEM\"}/>\n\n          {occupiedSpace===-1 &&<center className='messageSpacing'> <p className='driversEntryPermit ' >ALL PARKING SLOTS FOR {driverInfo.truckCategory} ARE EMPTY, PLEASE WAIT UNTIL SOMEONE ENTERS AND IS READY TO LEAVE. </p></center>}\n          <Row className= \"ticketBorder\" >\n            <Col>\n          <Row><p className='apapa'>LILYPOND</p></Row> \n          \n          <Row className =\"ticketIntro\">\n          <p className='driversEntryPermit'>DRIVERS EXIT SLIP</p>\n            </Row>\n\n            <Row className=\"ticketIntro\">\n\n            <Col>\n            <Row>\n           <Image className=\"truckImage\" src={driverInfo && driverInfo.truckCategory === \"FLAT BED APMT\"?flatbedAPMTImage:(driverInfo && driverInfo.truckCategory === \"FLAT BED ENL/EKO\"?flatbedENLImage:(driverInfo && driverInfo.truckCategory === \"EXPORT\"?exportImage:(invalidTicket)))} alt={\"truck image\"} fluid>\n           </Image>\n           </Row>\n            </Col> \n            \n            <Col>\n            <p className=\"centreAttempt\">TRUCK CATEGORY:</p><p className=\"centreAttempt slightlyLesserAppFont\">{driverInfo?driverInfo.truckCategory:'N/A'}</p> \n            </Col> \n            </Row>\n            </Col>\n          \n          \n         \n            \n           <Row>\n           <Col md={6}>\n             \n            <Row className= \"numberBorder\">\n              <Card>\n              <ListGroup variant='flush'>\n              <ListGroup.Item>\n              <Row>\n                   <Col className=\"slightlyLesserAppFont\"> EXITING FROM ZONE</Col>\n                   \n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                <center>\n                <p className=\"bigNumber\" >\n                  \n                 {driverInfo?driverInfo.parkZone:'-'}\n                 </p>\n                 </center>\n               </ListGroup.Item>\n\n               <ListGroup.Item>\n                 <Row>\n                   <Col className=\"slightlyBiggerAppFont\">Thank you for coming!</Col>\n                   {/*<Col>\n                    <strong className=\"mildlyBiggerAppFont\"> {zoneCounter + 1} </strong>\n                   </Col>*/}\n                 </Row>\n               </ListGroup.Item>\n\n               </ListGroup >\n                \n                \n                \n                \n                {\n                /*<Row><h1> TAG NO</h1></Row>\n                <Row className=\"bigNumber\" > {'tagCounter'}</Row>\n                <Row>PARK ZONE</Row>\n                <Row>{'zoneCounter'}</Row>*/}\n              </Card>\n            </Row>\n           </Col>\n           \n            <Col md={6}>\n             <Card>\n              <ListGroup variant='flush'  className='borderless'>\n              <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>BOOKING NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{driverInfo?driverInfo.bookingNumber:'N/A'}</h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n              \n              \n              <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>TRUCK NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{driverInfo?driverInfo.truckNumber:'N/A'}</h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n              \n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col>CONTAINER NUMBER:</Col>\n                   <Col>\n                   <h2 className=\"appFont\">{driverInfo?driverInfo.containerNumber:'N/A'} </h2>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n\n               <ListGroup.Item className='borderless centerAttempt entryHeader'>\n                 <Row className=\"headerFont \">\n                   <Col >EXIT DETAILS</Col> \n                   \n                 </Row>\n               </ListGroup.Item>\n\n\n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col> TIME:</Col>\n                   <Col>\n                    <strong className=\"appFont\">{occupiedSpace=== -1 ?'--':showTime()}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n\n               <ListGroup.Item className='borderless'>\n                 <Row className=\"appFont\">\n                   <Col> DATE:</Col>\n                   <Col>\n                    {/*<strong>{product.countInStock > 4 ?'In Stock':product.countInStock <= 3 ?'Few Left !!':product.countInStock === 0 ? 'Out of Stock':'Currently being restocked' //this currenty being restocked is not the right thing, you just put it there as filler, till the need comes to fix it }</strong>*/}\n                     <strong className=\"appFont\">{occupiedSpace=== -1 ?'--':date.toLocaleDateString()}</strong>\n                   </Col>\n                 </Row>\n               </ListGroup.Item>\n             {/*product.countInStock > 0 &&*/ (\n               <ListGroup.Item className='borderless centerAttempt'>\n                  <Row className=\"appFont\">\n                    \n                    \n                    <Image className=\"truckImage\" src={barcode} alt={\"truck image\"} fluid>\n           </Image>\n                    \n                  </Row>\n                </ListGroup.Item>\n             )}\n\n               <ListGroup.Item>\n                 \n               </ListGroup.Item>\n\n              </ListGroup>\n             </Card>\n            </Col>\n           \n           <Col className=\"displayNone\">\n            <Row>\n           <Image className=\"truckImage\" src={invalidTicket} alt={\"truck image\"} fluid>\n           </Image>\n           </Row>\n           \n           \n           </Col>\n           </Row>\n\n          </Row>\n             { occupiedSpace !== -1 && <center>\n          <Button onClick={updateAndPrintHandler} className='btn-block printFont printButtonTop' type='button' >\n                 <i className='fas fa-print'></i> Print\n                 </Button>\n                 </center> }\n\n                 \n\n               { /*   <center>\n                 \n          <Button  onClick={previousPageHandler} className='btn-block printFont printButton' type='button' >\n                 <i className='fas fa-arrow-left'></i> Go Back\n                 </Button>\n                 \n               </center> */}\n          </>\n       {order && <Message variant='danger'>{order.instruction}</Message>}\n\n        </>\n      )\n\n}\n\nexport default PrintingScreen\n",{"ruleId":"386","replacedBy":"387"},{"ruleId":"388","replacedBy":"389"},{"ruleId":"390","severity":1,"message":"391","line":7,"column":8,"nodeType":"392","messageId":"393","endLine":7,"endColumn":18},{"ruleId":"390","severity":1,"message":"394","line":13,"column":8,"nodeType":"392","messageId":"393","endLine":13,"endColumn":18},{"ruleId":"390","severity":1,"message":"395","line":14,"column":8,"nodeType":"392","messageId":"393","endLine":14,"endColumn":19},{"ruleId":"390","severity":1,"message":"396","line":15,"column":8,"nodeType":"392","messageId":"393","endLine":15,"endColumn":22},{"ruleId":"390","severity":1,"message":"397","line":16,"column":8,"nodeType":"392","messageId":"393","endLine":16,"endColumn":21},{"ruleId":"390","severity":1,"message":"398","line":17,"column":8,"nodeType":"392","messageId":"393","endLine":17,"endColumn":22},{"ruleId":"390","severity":1,"message":"399","line":18,"column":8,"nodeType":"392","messageId":"393","endLine":18,"endColumn":21},{"ruleId":"390","severity":1,"message":"400","line":19,"column":8,"nodeType":"392","messageId":"393","endLine":19,"endColumn":24},{"ruleId":"390","severity":1,"message":"401","line":20,"column":8,"nodeType":"392","messageId":"393","endLine":20,"endColumn":19},{"ruleId":"390","severity":1,"message":"402","line":22,"column":8,"nodeType":"392","messageId":"393","endLine":22,"endColumn":27},{"ruleId":"390","severity":1,"message":"403","line":23,"column":8,"nodeType":"392","messageId":"393","endLine":23,"endColumn":22},{"ruleId":"390","severity":1,"message":"404","line":24,"column":8,"nodeType":"392","messageId":"393","endLine":24,"endColumn":22},{"ruleId":"390","severity":1,"message":"405","line":25,"column":8,"nodeType":"392","messageId":"393","endLine":25,"endColumn":22},{"ruleId":"390","severity":1,"message":"406","line":26,"column":8,"nodeType":"392","messageId":"393","endLine":26,"endColumn":25},{"ruleId":"390","severity":1,"message":"407","line":27,"column":8,"nodeType":"392","messageId":"393","endLine":27,"endColumn":25},{"ruleId":"390","severity":1,"message":"408","line":2,"column":9,"nodeType":"392","messageId":"393","endLine":2,"endColumn":14},{"ruleId":"390","severity":1,"message":"409","line":7,"column":16,"nodeType":"392","messageId":"393","endLine":7,"endColumn":25},{"ruleId":"390","severity":1,"message":"410","line":8,"column":9,"nodeType":"392","messageId":"393","endLine":8,"endColumn":19},{"ruleId":"390","severity":1,"message":"411","line":9,"column":8,"nodeType":"392","messageId":"393","endLine":9,"endColumn":17},{"ruleId":"390","severity":1,"message":"412","line":10,"column":8,"nodeType":"392","messageId":"393","endLine":10,"endColumn":17},{"ruleId":"390","severity":1,"message":"413","line":19,"column":9,"nodeType":"392","messageId":"393","endLine":19,"endColumn":15},{"ruleId":"390","severity":1,"message":"414","line":21,"column":10,"nodeType":"392","messageId":"393","endLine":21,"endColumn":24},{"ruleId":"390","severity":1,"message":"415","line":27,"column":10,"nodeType":"392","messageId":"393","endLine":27,"endColumn":17},{"ruleId":"390","severity":1,"message":"416","line":27,"column":19,"nodeType":"392","messageId":"393","endLine":27,"endColumn":24},{"ruleId":"390","severity":1,"message":"417","line":27,"column":25,"nodeType":"392","messageId":"393","endLine":27,"endColumn":30},{"ruleId":"390","severity":1,"message":"418","line":31,"column":18,"nodeType":"392","messageId":"393","endLine":31,"endColumn":31},{"ruleId":"390","severity":1,"message":"419","line":31,"column":39,"nodeType":"392","messageId":"393","endLine":31,"endColumn":50},{"ruleId":"390","severity":1,"message":"420","line":31,"column":51,"nodeType":"392","messageId":"393","endLine":31,"endColumn":57},{"ruleId":"390","severity":1,"message":"421","line":59,"column":9,"nodeType":"392","messageId":"393","endLine":59,"endColumn":22},{"ruleId":"390","severity":1,"message":"422","line":2,"column":9,"nodeType":"392","messageId":"393","endLine":2,"endColumn":13},{"ruleId":"390","severity":1,"message":"423","line":3,"column":19,"nodeType":"392","messageId":"393","endLine":3,"endColumn":24},{"ruleId":"390","severity":1,"message":"424","line":4,"column":8,"nodeType":"392","messageId":"393","endLine":4,"endColumn":14},{"ruleId":"390","severity":1,"message":"425","line":5,"column":8,"nodeType":"392","messageId":"393","endLine":5,"endColumn":15},{"ruleId":"390","severity":1,"message":"426","line":6,"column":8,"nodeType":"392","messageId":"393","endLine":6,"endColumn":14},{"ruleId":"390","severity":1,"message":"427","line":8,"column":9,"nodeType":"392","messageId":"393","endLine":8,"endColumn":14},{"ruleId":"390","severity":1,"message":"428","line":10,"column":28,"nodeType":"392","messageId":"393","endLine":10,"endColumn":47},{"ruleId":"390","severity":1,"message":"429","line":11,"column":9,"nodeType":"392","messageId":"393","endLine":11,"endColumn":36},{"ruleId":"390","severity":1,"message":"415","line":22,"column":18,"nodeType":"392","messageId":"393","endLine":22,"endColumn":25},{"ruleId":"390","severity":1,"message":"416","line":22,"column":27,"nodeType":"392","messageId":"393","endLine":22,"endColumn":32},{"ruleId":"390","severity":1,"message":"430","line":25,"column":18,"nodeType":"392","messageId":"393","endLine":25,"endColumn":38},{"ruleId":"390","severity":1,"message":"431","line":25,"column":46,"nodeType":"392","messageId":"393","endLine":25,"endColumn":64},{"ruleId":"390","severity":1,"message":"432","line":32,"column":29,"nodeType":"392","messageId":"393","endLine":32,"endColumn":42},{"ruleId":"390","severity":1,"message":"433","line":36,"column":10,"nodeType":"392","messageId":"393","endLine":36,"endColumn":19},{"ruleId":"434","severity":1,"message":"435","line":68,"column":4,"nodeType":"436","endLine":68,"endColumn":23,"suggestions":"437"},{"ruleId":"390","severity":1,"message":"438","line":71,"column":8,"nodeType":"392","messageId":"393","endLine":71,"endColumn":27},{"ruleId":"390","severity":1,"message":"439","line":98,"column":7,"nodeType":"392","messageId":"393","endLine":98,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":121,"column":12,"nodeType":"442","messageId":"443","endLine":121,"endColumn":14},{"ruleId":"390","severity":1,"message":"444","line":127,"column":34,"nodeType":"392","messageId":"393","endLine":127,"endColumn":37},{"ruleId":"390","severity":1,"message":"415","line":19,"column":10,"nodeType":"392","messageId":"393","endLine":19,"endColumn":17},{"ruleId":"390","severity":1,"message":"416","line":19,"column":18,"nodeType":"392","messageId":"393","endLine":19,"endColumn":23},{"ruleId":"445","severity":1,"message":"446","line":55,"column":29,"nodeType":"447","messageId":"448","endLine":55,"endColumn":31},{"ruleId":"445","severity":1,"message":"446","line":55,"column":42,"nodeType":"447","messageId":"448","endLine":55,"endColumn":44},{"ruleId":"390","severity":1,"message":"415","line":35,"column":10,"nodeType":"392","messageId":"393","endLine":35,"endColumn":17},{"ruleId":"390","severity":1,"message":"416","line":35,"column":18,"nodeType":"392","messageId":"393","endLine":35,"endColumn":23},{"ruleId":"390","severity":1,"message":"449","line":4,"column":59,"nodeType":"392","messageId":"393","endLine":4,"endColumn":70},{"ruleId":"390","severity":1,"message":"415","line":19,"column":11,"nodeType":"392","messageId":"393","endLine":19,"endColumn":18},{"ruleId":"390","severity":1,"message":"450","line":19,"column":25,"nodeType":"392","messageId":"393","endLine":19,"endColumn":31},{"ruleId":"390","severity":1,"message":"451","line":25,"column":19,"nodeType":"392","messageId":"393","endLine":25,"endColumn":27},{"ruleId":"390","severity":1,"message":"452","line":28,"column":16,"nodeType":"392","messageId":"393","endLine":28,"endColumn":23},{"ruleId":"434","severity":1,"message":"453","line":96,"column":5,"nodeType":"436","endLine":96,"endColumn":89,"suggestions":"454"},{"ruleId":"390","severity":1,"message":"455","line":4,"column":9,"nodeType":"392","messageId":"393","endLine":4,"endColumn":21},{"ruleId":"390","severity":1,"message":"456","line":15,"column":13,"nodeType":"392","messageId":"393","endLine":15,"endColumn":21},{"ruleId":"390","severity":1,"message":"457","line":27,"column":19,"nodeType":"392","messageId":"393","endLine":27,"endColumn":31},{"ruleId":"390","severity":1,"message":"458","line":28,"column":17,"nodeType":"392","messageId":"393","endLine":28,"endColumn":26},{"ruleId":"390","severity":1,"message":"459","line":41,"column":18,"nodeType":"392","messageId":"393","endLine":41,"endColumn":28},{"ruleId":"390","severity":1,"message":"460","line":140,"column":7,"nodeType":"392","messageId":"393","endLine":140,"endColumn":28},{"ruleId":"390","severity":1,"message":"461","line":28,"column":7,"nodeType":"392","messageId":"393","endLine":28,"endColumn":17},{"ruleId":"390","severity":1,"message":"462","line":24,"column":9,"nodeType":"392","messageId":"393","endLine":24,"endColumn":17},{"ruleId":"390","severity":1,"message":"415","line":20,"column":10,"nodeType":"392","messageId":"393","endLine":20,"endColumn":17},{"ruleId":"390","severity":1,"message":"416","line":20,"column":18,"nodeType":"392","messageId":"393","endLine":20,"endColumn":23},{"ruleId":"390","severity":1,"message":"462","line":40,"column":9,"nodeType":"392","messageId":"393","endLine":40,"endColumn":17},{"ruleId":"434","severity":1,"message":"463","line":80,"column":4,"nodeType":"436","endLine":80,"endColumn":86,"suggestions":"464"},{"ruleId":"390","severity":1,"message":"465","line":219,"column":24,"nodeType":"392","messageId":"393","endLine":219,"endColumn":32},{"ruleId":"386","replacedBy":"466"},{"ruleId":"388","replacedBy":"467"},{"ruleId":"390","severity":1,"message":"422","line":2,"column":9,"nodeType":"392","messageId":"393","endLine":2,"endColumn":13},{"ruleId":"390","severity":1,"message":"468","line":3,"column":50,"nodeType":"392","messageId":"393","endLine":3,"endColumn":54},{"ruleId":"390","severity":1,"message":"424","line":4,"column":8,"nodeType":"392","messageId":"393","endLine":4,"endColumn":14},{"ruleId":"390","severity":1,"message":"426","line":6,"column":8,"nodeType":"392","messageId":"393","endLine":6,"endColumn":14},{"ruleId":"390","severity":1,"message":"428","line":15,"column":28,"nodeType":"392","messageId":"393","endLine":15,"endColumn":47},{"ruleId":"390","severity":1,"message":"429","line":16,"column":9,"nodeType":"392","messageId":"393","endLine":16,"endColumn":36},{"ruleId":"390","severity":1,"message":"469","line":17,"column":9,"nodeType":"392","messageId":"393","endLine":17,"endColumn":17},{"ruleId":"390","severity":1,"message":"470","line":23,"column":11,"nodeType":"392","messageId":"393","endLine":23,"endColumn":14},{"ruleId":"390","severity":1,"message":"471","line":23,"column":16,"nodeType":"392","messageId":"393","endLine":23,"endColumn":22},{"ruleId":"390","severity":1,"message":"472","line":24,"column":11,"nodeType":"392","messageId":"393","endLine":24,"endColumn":17},{"ruleId":"390","severity":1,"message":"473","line":24,"column":19,"nodeType":"392","messageId":"393","endLine":24,"endColumn":28},{"ruleId":"390","severity":1,"message":"474","line":25,"column":11,"nodeType":"392","messageId":"393","endLine":25,"endColumn":18},{"ruleId":"390","severity":1,"message":"475","line":25,"column":20,"nodeType":"392","messageId":"393","endLine":25,"endColumn":30},{"ruleId":"390","severity":1,"message":"476","line":26,"column":11,"nodeType":"392","messageId":"393","endLine":26,"endColumn":20},{"ruleId":"390","severity":1,"message":"477","line":26,"column":22,"nodeType":"392","messageId":"393","endLine":26,"endColumn":34},{"ruleId":"390","severity":1,"message":"478","line":27,"column":11,"nodeType":"392","messageId":"393","endLine":27,"endColumn":21},{"ruleId":"390","severity":1,"message":"415","line":31,"column":18,"nodeType":"392","messageId":"393","endLine":31,"endColumn":25},{"ruleId":"390","severity":1,"message":"416","line":31,"column":27,"nodeType":"392","messageId":"393","endLine":31,"endColumn":32},{"ruleId":"390","severity":1,"message":"430","line":34,"column":18,"nodeType":"392","messageId":"393","endLine":34,"endColumn":38},{"ruleId":"390","severity":1,"message":"431","line":34,"column":46,"nodeType":"392","messageId":"393","endLine":34,"endColumn":64},{"ruleId":"390","severity":1,"message":"479","line":37,"column":24,"nodeType":"392","messageId":"393","endLine":37,"endColumn":36},{"ruleId":"390","severity":1,"message":"480","line":37,"column":43,"nodeType":"392","messageId":"393","endLine":37,"endColumn":53},{"ruleId":"434","severity":1,"message":"481","line":49,"column":26,"nodeType":"482","endLine":49,"endColumn":31},{"ruleId":"390","severity":1,"message":"439","line":76,"column":7,"nodeType":"392","messageId":"393","endLine":76,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":99,"column":12,"nodeType":"442","messageId":"443","endLine":99,"endColumn":14},{"ruleId":"390","severity":1,"message":"444","line":105,"column":34,"nodeType":"392","messageId":"393","endLine":105,"endColumn":37},{"ruleId":"390","severity":1,"message":"483","line":111,"column":9,"nodeType":"392","messageId":"393","endLine":111,"endColumn":15},{"ruleId":"390","severity":1,"message":"422","line":4,"column":9,"nodeType":"392","messageId":"393","endLine":4,"endColumn":13},{"ruleId":"390","severity":1,"message":"468","line":5,"column":50,"nodeType":"392","messageId":"393","endLine":5,"endColumn":54},{"ruleId":"390","severity":1,"message":"424","line":6,"column":8,"nodeType":"392","messageId":"393","endLine":6,"endColumn":14},{"ruleId":"390","severity":1,"message":"484","line":10,"column":8,"nodeType":"392","messageId":"393","endLine":10,"endColumn":21},{"ruleId":"390","severity":1,"message":"427","line":14,"column":9,"nodeType":"392","messageId":"393","endLine":14,"endColumn":14},{"ruleId":"390","severity":1,"message":"485","line":15,"column":9,"nodeType":"392","messageId":"393","endLine":15,"endColumn":27},{"ruleId":"390","severity":1,"message":"428","line":15,"column":28,"nodeType":"392","messageId":"393","endLine":15,"endColumn":47},{"ruleId":"390","severity":1,"message":"429","line":17,"column":9,"nodeType":"392","messageId":"393","endLine":17,"endColumn":36},{"ruleId":"390","severity":1,"message":"469","line":18,"column":9,"nodeType":"392","messageId":"393","endLine":18,"endColumn":17},{"ruleId":"390","severity":1,"message":"486","line":19,"column":9,"nodeType":"392","messageId":"393","endLine":19,"endColumn":20},{"ruleId":"390","severity":1,"message":"470","line":24,"column":11,"nodeType":"392","messageId":"393","endLine":24,"endColumn":14},{"ruleId":"390","severity":1,"message":"471","line":24,"column":16,"nodeType":"392","messageId":"393","endLine":24,"endColumn":22},{"ruleId":"390","severity":1,"message":"472","line":25,"column":11,"nodeType":"392","messageId":"393","endLine":25,"endColumn":17},{"ruleId":"390","severity":1,"message":"473","line":25,"column":19,"nodeType":"392","messageId":"393","endLine":25,"endColumn":28},{"ruleId":"390","severity":1,"message":"474","line":26,"column":11,"nodeType":"392","messageId":"393","endLine":26,"endColumn":18},{"ruleId":"390","severity":1,"message":"475","line":26,"column":20,"nodeType":"392","messageId":"393","endLine":26,"endColumn":30},{"ruleId":"390","severity":1,"message":"477","line":27,"column":22,"nodeType":"392","messageId":"393","endLine":27,"endColumn":34},{"ruleId":"390","severity":1,"message":"422","line":2,"column":9,"nodeType":"392","messageId":"393","endLine":2,"endColumn":13},{"ruleId":"390","severity":1,"message":"423","line":3,"column":19,"nodeType":"392","messageId":"393","endLine":3,"endColumn":24},{"ruleId":"390","severity":1,"message":"424","line":4,"column":8,"nodeType":"392","messageId":"393","endLine":4,"endColumn":14},{"ruleId":"390","severity":1,"message":"425","line":5,"column":8,"nodeType":"392","messageId":"393","endLine":5,"endColumn":15},{"ruleId":"390","severity":1,"message":"426","line":6,"column":8,"nodeType":"392","messageId":"393","endLine":6,"endColumn":14},{"ruleId":"390","severity":1,"message":"427","line":8,"column":9,"nodeType":"392","messageId":"393","endLine":8,"endColumn":14},{"ruleId":"390","severity":1,"message":"428","line":10,"column":28,"nodeType":"392","messageId":"393","endLine":10,"endColumn":47},{"ruleId":"390","severity":1,"message":"429","line":11,"column":9,"nodeType":"392","messageId":"393","endLine":11,"endColumn":36},{"ruleId":"390","severity":1,"message":"415","line":22,"column":18,"nodeType":"392","messageId":"393","endLine":22,"endColumn":25},{"ruleId":"390","severity":1,"message":"416","line":22,"column":27,"nodeType":"392","messageId":"393","endLine":22,"endColumn":32},{"ruleId":"390","severity":1,"message":"487","line":25,"column":34,"nodeType":"392","messageId":"393","endLine":25,"endColumn":45},{"ruleId":"390","severity":1,"message":"433","line":33,"column":10,"nodeType":"392","messageId":"393","endLine":33,"endColumn":19},{"ruleId":"434","severity":1,"message":"435","line":62,"column":4,"nodeType":"436","endLine":62,"endColumn":23,"suggestions":"488"},{"ruleId":"390","severity":1,"message":"439","line":85,"column":7,"nodeType":"392","messageId":"393","endLine":85,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":108,"column":12,"nodeType":"442","messageId":"443","endLine":108,"endColumn":14},{"ruleId":"390","severity":1,"message":"444","line":114,"column":34,"nodeType":"392","messageId":"393","endLine":114,"endColumn":37},{"ruleId":"390","severity":1,"message":"489","line":129,"column":9,"nodeType":"392","messageId":"393","endLine":129,"endColumn":17},{"ruleId":"390","severity":1,"message":"490","line":140,"column":8,"nodeType":"392","messageId":"393","endLine":140,"endColumn":19},{"ruleId":"390","severity":1,"message":"422","line":2,"column":9,"nodeType":"392","messageId":"393","endLine":2,"endColumn":13},{"ruleId":"390","severity":1,"message":"468","line":3,"column":50,"nodeType":"392","messageId":"393","endLine":3,"endColumn":54},{"ruleId":"390","severity":1,"message":"424","line":4,"column":8,"nodeType":"392","messageId":"393","endLine":4,"endColumn":14},{"ruleId":"390","severity":1,"message":"426","line":6,"column":8,"nodeType":"392","messageId":"393","endLine":6,"endColumn":14},{"ruleId":"390","severity":1,"message":"427","line":14,"column":9,"nodeType":"392","messageId":"393","endLine":14,"endColumn":14},{"ruleId":"390","severity":1,"message":"428","line":15,"column":28,"nodeType":"392","messageId":"393","endLine":15,"endColumn":47},{"ruleId":"390","severity":1,"message":"429","line":16,"column":9,"nodeType":"392","messageId":"393","endLine":16,"endColumn":36},{"ruleId":"390","severity":1,"message":"469","line":17,"column":9,"nodeType":"392","messageId":"393","endLine":17,"endColumn":17},{"ruleId":"390","severity":1,"message":"486","line":18,"column":9,"nodeType":"392","messageId":"393","endLine":18,"endColumn":20},{"ruleId":"390","severity":1,"message":"470","line":23,"column":11,"nodeType":"392","messageId":"393","endLine":23,"endColumn":14},{"ruleId":"390","severity":1,"message":"471","line":23,"column":16,"nodeType":"392","messageId":"393","endLine":23,"endColumn":22},{"ruleId":"390","severity":1,"message":"472","line":24,"column":11,"nodeType":"392","messageId":"393","endLine":24,"endColumn":17},{"ruleId":"390","severity":1,"message":"473","line":24,"column":19,"nodeType":"392","messageId":"393","endLine":24,"endColumn":28},{"ruleId":"390","severity":1,"message":"474","line":25,"column":11,"nodeType":"392","messageId":"393","endLine":25,"endColumn":18},{"ruleId":"390","severity":1,"message":"475","line":25,"column":20,"nodeType":"392","messageId":"393","endLine":25,"endColumn":30},{"ruleId":"390","severity":1,"message":"476","line":26,"column":11,"nodeType":"392","messageId":"393","endLine":26,"endColumn":20},{"ruleId":"390","severity":1,"message":"477","line":26,"column":22,"nodeType":"392","messageId":"393","endLine":26,"endColumn":34},{"ruleId":"390","severity":1,"message":"478","line":27,"column":11,"nodeType":"392","messageId":"393","endLine":27,"endColumn":21},{"ruleId":"390","severity":1,"message":"491","line":27,"column":23,"nodeType":"392","messageId":"393","endLine":27,"endColumn":36},{"ruleId":"390","severity":1,"message":"492","line":32,"column":10,"nodeType":"392","messageId":"393","endLine":32,"endColumn":17},{"ruleId":"390","severity":1,"message":"415","line":32,"column":18,"nodeType":"392","messageId":"393","endLine":32,"endColumn":25},{"ruleId":"390","severity":1,"message":"416","line":32,"column":27,"nodeType":"392","messageId":"393","endLine":32,"endColumn":32},{"ruleId":"390","severity":1,"message":"493","line":35,"column":24,"nodeType":"392","messageId":"393","endLine":35,"endColumn":38},{"ruleId":"390","severity":1,"message":"494","line":35,"column":46,"nodeType":"392","messageId":"393","endLine":35,"endColumn":58},{"ruleId":"390","severity":1,"message":"439","line":72,"column":7,"nodeType":"392","messageId":"393","endLine":72,"endColumn":26},{"ruleId":"440","severity":1,"message":"441","line":95,"column":12,"nodeType":"442","messageId":"443","endLine":95,"endColumn":14},{"ruleId":"390","severity":1,"message":"444","line":101,"column":34,"nodeType":"392","messageId":"393","endLine":101,"endColumn":37},{"ruleId":"390","severity":1,"message":"483","line":111,"column":9,"nodeType":"392","messageId":"393","endLine":111,"endColumn":15},{"ruleId":"390","severity":1,"message":"495","line":112,"column":7,"nodeType":"392","messageId":"393","endLine":112,"endColumn":15},{"ruleId":"390","severity":1,"message":"496","line":113,"column":7,"nodeType":"392","messageId":"393","endLine":113,"endColumn":18},"no-native-reassign",["497"],"no-negated-in-lhs",["498"],"no-unused-vars","'HomeScreen' is defined but never used.","Identifier","unusedVar","'CartScreen' is defined but never used.","'LoginScreen' is defined but never used.","'RegisterScreen' is defined but never used.","'ProfileScreen' is defined but never used.","'ShippingScreen' is defined but never used.","'PaymentScreen' is defined but never used.","'PlaceOrderScreen' is defined but never used.","'OrderScreen' is defined but never used.","'CommunicationScreen' is defined but never used.","'AdminComScreen' is defined but never used.","'UserListScreen' is defined but never used.","'UserEditScreen' is defined but never used.","'ProductListScreen' is defined but never used.","'ProductEditScreen' is defined but never used.","'Route' is defined but never used.","'listUsers' is defined but never used.","'listOrders' is defined but never used.","'SearchBox' is defined but never used.","'bridgeway' is defined but never used.","'seller' is assigned a value but never used.","'cartVisibility' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'users' is assigned a value but never used.","'loadingOrders' is assigned a value but never used.","'errorOrders' is assigned a value but never used.","'orders' is assigned a value but never used.","'logoutHandler' is assigned a value but never used.","'Link' is defined but never used.","'Image' is defined but never used.","'Rating' is defined but never used.","'Message' is defined but never used.","'Loader' is defined but never used.","'login' is defined but never used.","'createProductReview' is defined but never used.","'PRODUCT_CREATE_REVIEW_RESET' is defined but never used.","'successProductReview' is assigned a value but never used.","'errorProductReview' is assigned a value but never used.","'loadingticket' is assigned a value but never used.","'bookingNo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'date' and 'email'. Either include them or remove the dependency array. You can also do a functional update 'setEmail(e => ...)' if you only need 'email' in the 'setEmail' call.","ArrayExpression",["499"],"'fetchDetailsHandler' is assigned a value but never used.","'previousPageHandler' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'sec' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'FormControl' is defined but never used.","'error2' is assigned a value but never used.","'loading1' is assigned a value but never used.","'success' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["500"],"'PayPalButton' is defined but never used.","'sdkReady' is assigned a value but never used.","'setHighlight' is assigned a value but never used.","'setColour' is assigned a value but never used.","'loadingPay' is assigned a value but never used.","'successPaymentHandler' is assigned a value but never used.","'vendorName' is assigned a value but never used.","'redirect' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'vendorName'. Either include it or remove the dependency array.",["501"],"'userInfo' is assigned a value but never used.",["497"],["498"],"'Form' is defined but never used.","'register' is defined but never used.","'qty' is assigned a value but never used.","'setQty' is assigned a value but never used.","'rating' is assigned a value but never used.","'setRating' is assigned a value but never used.","'comment' is assigned a value but never used.","'setComment' is assigned a value but never used.","'buttonVis' is assigned a value but never used.","'setButtonVis' is assigned a value but never used.","'allowPrint' is assigned a value but never used.","'loadingorder' is assigned a value but never used.","'errororder' is assigned a value but never used.","Assignments to the 'printPermission' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'change' is assigned a value but never used.","'invalidTicket' is defined but never used.","'listProductDetails' is defined but never used.","'createOrder' is defined but never used.","'loadingexit' is assigned a value but never used.",["502"],"'zoneArea' is assigned a value but never used.","'zoneCounter' is assigned a value but never used.","'setAllowPrint' is assigned a value but never used.","'product' is assigned a value but never used.","'loadingRecords' is assigned a value but never used.","'errorRecords' is assigned a value but never used.","'zoneArea' is defined but never used.","'zoneCounter' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"503","fix":"509"},"Update the dependencies array to be: [date, dispatch, email, userInfo]",{"range":"510","text":"511"},"Update the dependencies array to be: [confirmedState, confirmedStates, userInfo, dispatch, cart, history]",{"range":"512","text":"513"},"Update the dependencies array to be: [dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",{"range":"514","text":"515"},{"range":"516","text":"511"},[2281,2300],"[date, dispatch, email, userInfo]",[3475,3559],"[confirmedState, confirmedStates, userInfo, dispatch, cart, history]",[2348,2430],"[dispatch, history, userInfo, successDelete, successCreate, createdProduct, pageNumber, vendorName]",[2023,2042]]